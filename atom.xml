<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ohmer&#39;s Blog</title>
  <subtitle>Code is used to implement idea and impove efficiency</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ohmerhe.com/"/>
  <updated>2017-04-27T03:56:22.000Z</updated>
  <id>http://ohmerhe.com/</id>
  
  <author>
    <name>Ohmer</name>
    <email>ohmerhe@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Espresso 实现完整覆盖的功能测试</title>
    <link href="http://ohmerhe.com/2017/04/18/espresso_huge_ui_test/"/>
    <id>http://ohmerhe.com/2017/04/18/espresso_huge_ui_test/</id>
    <published>2017-04-18T08:59:14.000Z</published>
    <updated>2017-04-27T03:56:22.000Z</updated>
    
    <content type="html">&lt;p&gt;tags: Android, 测试&lt;/p&gt;
&lt;p&gt;对于基于 UI 的功能测试的需求其实一直存在，理由其实很简单，不想一直让人去做重复机械的事情，而且可靠性完全是靠人力的堆积产生。然而现在行业大多数公司的功能测试工作依然主要是依靠人工来完成，从我们公司的实践来看我觉得有几个方面的因素的影响。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;之前的 UI 测试框架的表现差强人意。就拿我们公司来说，其实测试部门在去年已经实现并推广一套主要基于 UIAutomator 实现的测试平台，但由于对复杂功能的处理能力较弱，基本只能实现部分功能的检测。这样导致的一个结果是，并不能有效减少测试的工作，而只能增加测试的额外工作，因此测试编写测试代码的积极性不是很高。同时由于测试代码的可重复利用性差，导致测试脚本的编写成本和维护成本偏高，实践中大家只用 UI 测试跑一些主流程业务，覆盖范围非常有限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部分测试人员的编码能力不是很强。由于大部分测试人员可能并没有过多的开发经验，所以在编写测试代码时并不能很顺畅的完成自己想要的效果，这样也会导致测试代码项目的推广阻力会比较大。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于怎么编写 UI 测试，并没有一个被大家接受认可的最佳实践。虽然我用 Espresso 实现了一套完整的覆盖方案，但是其实我用的方法和 Google 官方所建议的写法还是有蛮多差异的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对比上面的几个因素，我觉得更为主要的原因还是在于现有测试平台对于复杂逻辑处理的能力不够，导致对于 UI 测试的依赖性仅仅局限在安装测试和兼容性测试，只能用来跑一些主流程的东西，对于大多数功能还只能依靠人工的方式完成。&lt;/p&gt;
&lt;h2 id=&quot;Espresso&quot;&gt;&lt;a href=&quot;#Espresso&quot; class=&quot;headerlink&quot; title=&quot;Espresso&quot;&gt;&lt;/a&gt;Espresso&lt;/h2&gt;&lt;p&gt;Espresso 是 Google 在 2013 年推出的 Android UI 测试的开源框架。其实之前我们团队也多多少少对 Espresso 有过一些尝试，但遗憾的是都没有深入的进行实践。一季度我们将 UI 测试作为一个很明确的坑来填以后，发现 Espresso 已经很强大了，经过实践下来我们发现用 Espresso 实现 80-90% 的功能性覆盖测试基本没有什么问题。而且 Espresso 的测试脚本编写起来非常简单，如果测试和开发共同来完成测试代码的编写，能够有效替代测试大量的重复机械的工作。&lt;/p&gt;
&lt;p&gt;下面我就来描述一下我们是怎么用 Espresso 来实现这一样一个完整覆盖的功能性测试平台。这篇文章会讲到一些在使用 Espresso 中遇到的坑，但是并不会在 How-to 的事情上面花太多的精力，如果你对 Espresso 还不是很了解的话，建议先去 &lt;a href=&quot;https://google.github.io/android-testing-support-library/docs/espresso/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt; 了解一些，并先进行一些简单的实践。&lt;/p&gt;
&lt;h2 id=&quot;ETP-测试方案&quot;&gt;&lt;a href=&quot;#ETP-测试方案&quot; class=&quot;headerlink&quot; title=&quot;ETP 测试方案&quot;&gt;&lt;/a&gt;ETP 测试方案&lt;/h2&gt;&lt;p&gt;在介绍我们的测试平台方案之前，需要提前说明的是，我们在使用 Espresso 的方式可能和官方 Demo 里所展示的方式不完全一样。为了让我们写的测试代码能够更加灵活和方便的被复用在不同的测试用例中，从而实现更低成本的全功能覆盖，我们进行了一些方案设计，最后实现了我们现在的测试平台。&lt;/p&gt;
&lt;p&gt;给我们的测试方案取了一个高大上的名称——ETP 测试方案，也就是 Espresso Test Platform 的简称。大家如果看过 Google 官方的 Demo 的话，就应该能理解官方的思路其实是每个测试是完成一条完整的逻辑测试，比如完成添加一个笔记的测试逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpox6.com1.z0.glb.clouddn.com/4A9E3284-F1C5-4ED5-8B7F-3E5D4ACF0475.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样的测试流程总结下来有两个比较明显的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每条测试用例需要单独编写，代码的复用性差，导致编写单元测试的成本较高，虽然 Google 官方提供录制测试脚本的功能，但是生成的代码可用性并不强，大多数情况下还是需要靠人来编写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;复杂场景的处理能力，这样一条单独的测试流程容易被触发性的弹窗或者引导提示打断，如果在单条测试中做过多的判断，又会让单条测试用例变得臃肿，从而让所有的测试用例都变得臃肿而且难于维护和更新。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;单页面测试&quot;&gt;&lt;a href=&quot;#单页面测试&quot; class=&quot;headerlink&quot; title=&quot;单页面测试&quot;&gt;&lt;/a&gt;单页面测试&lt;/h3&gt;&lt;p&gt;这是我为我们测试平台定义的一个基本测试单位，也是我们整个测试方案里面的一个核心概念。这里有两个方面需要明确一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有些人会说这是 Espresso 的标准写法，因为你在定义一个 Espresso 测试文件时就必须要指定一个启动的 Activity。但是从官方的 Demo 来看，他们倾向于这个 Activity 仅仅是一个入口，你应该在完成一条完整的测试用例（你可以根据需要跳转到任何页面）以后再进行相应验证。但是在我们的这里，启动的这个页面（可以是 Activity 或者 Fragment）以后就只做当前页面相关的逻辑测试，如果有页面跳转也仅仅是测试是否能成功跳转，不会再对应的界面产生更多的交互。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于 Espresso 是基于 JUnit 实现的，所以你可以针对单个页面编写多个独立得测试用例，它们会以随机的顺序被调用。在我们的单页面测试中，只有单一的测试入口，然后顺序执行这个页面需要执行的所有测试。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在单页面测试中，会根据需求尽可能覆盖这个页面的所有的功能。这个时候有人可能会说，在不同的应用状态下（比如：登录是否），通过 UI 测试所能产生的逻辑并不一致，怎么做到全覆盖能。我们的解决方案是在这个页面的测试代码中，需要全部覆盖该页面所有的逻辑分支，当开始执行这个单页面测试的时候，是怎么样的状态，就进入怎样的逻辑分支。这个时候又有人开始有疑问了，这样怎么做到全功能覆盖呢。想象力丰富的人可能已经想到了解决方案，我们先给到一张图启发一下，后面再介绍我们引入的下一个概念——测试流。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpox6.com1.z0.glb.clouddn.com/D2653BAE-B2DB-43E4-8A91-0FB9240DBA9A.png?imageView2/1/w/720&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;PS：如果使用的 MVP 的模式来编写代码的话，你会发现在单个页面需要那些逻辑是非常清晰的。&lt;/p&gt;
&lt;p&gt;虽然上面已经明确定义了单页面测试的写法，但是在实际应用过程中，还是会遇到一些场景，不在定义里面被约束，应该怎么处理会让人产生疑惑，会对单页面测试的能力的覆盖性产生怀疑。下面我列出来的几种情况常见的情况来解释应该怎么坚持单页面测试作为基本单位。&lt;/p&gt;
&lt;h4 id=&quot;页面关联性测试&quot;&gt;&lt;a href=&quot;#页面关联性测试&quot; class=&quot;headerlink&quot; title=&quot;页面关联性测试&quot;&gt;&lt;/a&gt;页面关联性测试&lt;/h4&gt;&lt;p&gt;当涉及到页面互相关联的逻辑，一个典型的场景就是在订阅页面订阅一个任务，然后在订阅列表页需要及时显示最新添加的订阅内容。官方的用例是把它放在一条测试里面就不用说了，在我们的测试方案里面应该怎么处理。&lt;/p&gt;
&lt;p&gt;最后我们选择的方案是分开测试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在订阅页面进行订阅相关测试，在这个页面只验证是否订阅成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在订阅列表界面，通过模拟订阅操作，发送一个订阅成功通知给这个页面，测试该页面是否会及时显示最新的订阅内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Activity-嵌套多个-Fragment&quot;&gt;&lt;a href=&quot;#Activity-嵌套多个-Fragment&quot; class=&quot;headerlink&quot; title=&quot;Activity 嵌套多个 Fragment&quot;&gt;&lt;/a&gt;Activity 嵌套多个 Fragment&lt;/h4&gt;&lt;p&gt;由于 Espresso 是以 Activity 为入口的，所以可能会导致产生一些误会，我们的单页面就是完全对应到 Activity，其实在我们的设计里面单页面对应到的独立子页面的，所以 Fragment 可以作为一个单独的「单页面测试存在」。在我们的应用里面，首界面有三个 tab，所以加上 MainActivityTest 这个单页面测试首界面总共有四个单页面测试。&lt;/p&gt;
&lt;h4 id=&quot;随机触发性逻辑&quot;&gt;&lt;a href=&quot;#随机触发性逻辑&quot; class=&quot;headerlink&quot; title=&quot;随机触发性逻辑&quot;&gt;&lt;/a&gt;随机触发性逻辑&lt;/h4&gt;&lt;p&gt;在应用中完成某些任务后，会发送一个全局的广播，然后会在后台触发一些和当前页面没有什么关联弹窗。这种场景对我们的 UI 测试是个挑战，由于的随机性，除非在每次都做大量重复的判断，否则很容易导致 UI 测试被中断失败。&lt;/p&gt;
&lt;p&gt;针对这样的场景我们有个小伙伴提了一个特别好的解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;为这些随机的弹窗测试单独写测试，可以嵌入到在业务上认为合理的单页面测试中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一般这样的触发性的弹窗都会有相应的全局性的变量用来控制，在执行其他的单页面测试的时候，则手动将对应的控制开关关闭。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;测试流和全功能覆盖&quot;&gt;&lt;a href=&quot;#测试流和全功能覆盖&quot; class=&quot;headerlink&quot; title=&quot;测试流和全功能覆盖&quot;&gt;&lt;/a&gt;测试流和全功能覆盖&lt;/h3&gt;&lt;p&gt;在每个页面的单页面测试都完成以后，接下来的任务就是怎么有效的将这些单页面组合起来。在单元测试中每个单元测试都是独立的，所以只要保证所有的测试用例被执行过就可以了。但是现在我们的目的是实现功能测试，所以一定会有一些状态下的逻辑需要测试。于是在单页面的基础上我们加入了测试流的概念。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpox6.com1.z0.glb.clouddn.com/BA340370-0A57-4C0A-8FB4-E93B41D51950.png?imageView2/1/w/720&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一条测试流其实是不同单页面测试的顺序执行。通过前面的单页面测试来后对应用的产生的输出，变成后面一个单页面测试的输入（如：在某条测试流中需要应用处于登录状态，则可以在整个测试流的第一个单页面测试应该是登录页面测试）。&lt;/li&gt;
&lt;li&gt;单条测试流可以对应到某条业务的一条完整流程，一般会覆盖多个测试用例。&lt;/li&gt;
&lt;li&gt;通过不同的测试流，来测试同一页面中不同的逻辑分支。&lt;/li&gt;
&lt;li&gt;通过测试流的叠加来实现全功能的测试覆盖。这里的逻辑是当每个页面的所有逻辑都被测试过，则实现了全功能的测试覆盖。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Espresso-的坑&quot;&gt;&lt;a href=&quot;#Espresso-的坑&quot; class=&quot;headerlink&quot; title=&quot;Espresso 的坑&quot;&gt;&lt;/a&gt;Espresso 的坑&lt;/h2&gt;&lt;p&gt;虽然 Espresso 已经很强大了，但是从2.2这个版本以后，已经很久没有更行新版本了，其实里面还是有很多坑的，在使用 Espresso 的时候需要尽量避免。&lt;/p&gt;
&lt;h3 id=&quot;Idling-后面需要有-onView-的阻塞操作才能产生效果&quot;&gt;&lt;a href=&quot;#Idling-后面需要有-onView-的阻塞操作才能产生效果&quot; class=&quot;headerlink&quot; title=&quot;Idling 后面需要有 onView 的阻塞操作才能产生效果&quot;&gt;&lt;/a&gt;Idling 后面需要有 onView 的阻塞操作才能产生效果&lt;/h3&gt;&lt;p&gt;在刚开始接触 IdlingResource 的时候，对它抱有太多的幻想，以为可以肆无忌惮的处理异步的问题，使用之后才发现问题其实也不少，甚至还有一些明显的 bug。&lt;/p&gt;
&lt;p&gt;在 IdlingResource 的说明文档里说可以总结成这样一句话 &lt;code&gt;you have to use Idling Resources to inform Espresso of the app’s long-running operations.&lt;/code&gt;。在这里我们并不能很直白的理解出 IdlingResource 只能用来等待 &lt;code&gt;UI events&lt;/code&gt;。也就是说在官方的设计里面，要使用 IdlingResource 来维持对应的后台操作，后面的紧跟着一条 UI 操作或验证，否则将不会生效。这样导致的结果是在一个后台操作完成以后是关闭当前页面的场景，根本无法测试。&lt;/p&gt;
&lt;p&gt;如果这算是 Espresso 的特性的话，下面这个就是一个明显的 bug。&lt;/p&gt;
&lt;h3 id=&quot;不同线程-IdlingResource-的-bug&quot;&gt;&lt;a href=&quot;#不同线程-IdlingResource-的-bug&quot; class=&quot;headerlink&quot; title=&quot;不同线程 IdlingResource 的 bug&quot;&gt;&lt;/a&gt;不同线程 IdlingResource 的 bug&lt;/h3&gt;&lt;p&gt;在进行 UI 测试的时候，有两个主线程需要区分一下，一个是主 App 运行的主线程（[main,5,main]），另一个是 UI 测试跑的主线程（[Instr: android.support.test.runner.AndroidJUnitRunner,5,main]）。我们触发的UI事件都是在 App 主线程里面执行的，如果我们想要在 App 的线程里面做一些操作需要切换到对应的线程操作。如下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mActivityTestRule.getActivity().runOnUiThread(new Runnable() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            @Override&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            public void run() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                LogUtils.d(TAG, &amp;quot;runOnUiThread...&amp;quot; + Thread.currentThread());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                TaskApi.Companion.getMyTasks(0, 10000, &amp;quot;&amp;quot;,  new HSAPICallback&amp;lt;TaskListResult&amp;gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    public void onRequestSuccess(TaskListResult data, int httpStatus,Boolean fromCache) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        super.onRequestSuccess(data, httpStatus, fromCache);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        mTasks = data.getDatas();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;理论上这里进行的异步操作应该和 App 里面执行的异步操作是一样的，可以用 IdlingResource 去守护这样一个后台操作，但是实际使用下来，虽然 IdlingResource 已经接受到对应的异步完成回调，但是并没有回调到被注册的 ResourceCallback。&lt;/p&gt;
&lt;h3 id=&quot;hasProperty-异常&quot;&gt;&lt;a href=&quot;#hasProperty-异常&quot; class=&quot;headerlink&quot; title=&quot;hasProperty 异常&quot;&gt;&lt;/a&gt;hasProperty 异常&lt;/h3&gt;&lt;p&gt;Espresso 用的是 Hamcrest 的语法来进行的验证，理论上应该支持所有 Hamcrest 的写法，但是当我们在使用 hasProperty 这个方法的时候，会发现下面这样的错误。这主要是由于 Android SDK 里面并没有完整 JDK 的库，我们用到这部分刚好在 Android SDK 没有。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;java.lang.NoClassDefFoundError: Failed resolution of: Ljava/beans/Introspector;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;at org.hamcrest.beans.PropertyUtil.propertyDescriptorsFor(PropertyUtil.java:47)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;at org.hamcrest.beans.PropertyUtil.getPropertyDescriptor(PropertyUtil.java:28)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;at org.hamcrest.beans.HasPropertyWithValue.propertyOn(HasPropertyWithValue.java:94)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;at org.hamcrest.beans.HasPropertyWithValue.matchesSafely(HasPropertyWithValue.java:81)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;at org.hamcrest.TypeSafeDiagnosingMatcher.matches(TypeSafeDiagnosingMatcher.java:55)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;at org.hamcrest.core.AllOf.matches(AllOf.java:27)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;at org.hamcrest.DiagnosingMatcher.matches(DiagnosingMatcher.java:12)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;at android.support.test.espresso.action.AdapterDataLoaderAction.perform(AdapterDataLoaderAction.java:83)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;at android.support.test.espresso.ViewInteraction$1.run(ViewInteraction.java:144)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:422)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;at java.util.concurrent.FutureTask.run(FutureTask.java:237)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;at android.os.Handler.handleCallback(Handler.java:739)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;at android.os.Handler.dispatchMessage(Handler.java:95)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;at android.os.Looper.loop(Looper.java:135)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据 &lt;a href=&quot;http://baiduhix.blogspot.com/2015/07/android-espresso-ondata-error.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android espresso onData error&lt;/a&gt; 这篇文章可以找到对应的解决方案，但是实际使用下来效果并不好，主要是 gradle 的 Android 插件在不同的版本里面对于引入 Java Core 的代码处理方式有差别，而且我用的 2.2.3 的版本根本就不能用，所以这里的建议绕过不要使用这个方法，我们最后是通过自己定义了一个 Match 来解决这个问题的。&lt;/p&gt;
&lt;h3 id=&quot;Drawerlayout-的坑导致用例执行失败&quot;&gt;&lt;a href=&quot;#Drawerlayout-的坑导致用例执行失败&quot; class=&quot;headerlink&quot; title=&quot;Drawerlayout 的坑导致用例执行失败&quot;&gt;&lt;/a&gt;Drawerlayout 的坑导致用例执行失败&lt;/h3&gt;&lt;p&gt;在官方 Support 包里面的 Drawerlayout 控件有个特性，就是当你触摸到它的触发区域就会发出一个延时操作（160ms），如果这段时间内没有子试图触发事件（如没有及时抬起手指）就会自动触发 Peek 动画，从而导致子试图的事件得不到响应。&lt;/p&gt;
&lt;p&gt;Espresso 的 perform(click()) 操作是先后发送了一个 EventDown 和 EventUp 事件，由于是异步发送的，所以没法保证每次两个事件的执行间隔在 160ms 之内，所以如果在 Drawerlayout 的拖拽相应区域内针对其他子试图的点击事件有可能得不到相应，从而导致用例执行失败。&lt;/p&gt;
&lt;p&gt;这种失败并不是业务逻辑出错，完全是 Drawerlayout 控件设计不合理导致的，而且 Google 的大神们根本没有提供关闭这个功能的接口（他们这么任性不是一次两次了）。 Drawerlayout 是官方提供的控件，你可以选择不使用这个控件自定义一个。我们的解决方案是通过 AOP 的方式在 Drawerlayout 发送这个延时操作以后马上将他从执行队列里移除，从而实现将它这个功能关闭的效果。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@Pointcut(&amp;quot;execution(* android.support.v4.widget.DrawerLayout.ViewDragCallback.onEdgeTouched(..))&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public void edgeTouchedPoint() &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@After(&amp;quot;edgeTouchedPoint()&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public void onExecutionPoint(final JoinPoint joinPoint) throws Throwable &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Reflect.on(joinPoint.getTarget()).call(&amp;quot;removeCallbacks&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;结束语&quot;&gt;&lt;a href=&quot;#结束语&quot; class=&quot;headerlink&quot; title=&quot;结束语&quot;&gt;&lt;/a&gt;结束语&lt;/h2&gt;&lt;p&gt;经过诸多尝试和实践，虽然过程中碰到了很多的问题，但最后都逐个被解决，证明用 Espresso 实现全功能覆盖的可行性。我们的方案已经开始实施，截止到现在虽然还没有完全实现覆盖，但是已经完成的部分已经开始产生效果，多次检测到由于开发不小心而导致的 bug，提高了产品的提测质量。可以预见在该方案完整实施后，将对产品质量有一个稳定、高效的保证。&lt;/p&gt;
&lt;h2 id=&quot;参考内容&quot;&gt;&lt;a href=&quot;#参考内容&quot; class=&quot;headerlink&quot; title=&quot;参考内容&quot;&gt;&lt;/a&gt;参考内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://google.github.io/android-testing-support-library/docs/espresso/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;espresso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/33120493/espresso-idling-resource-doesnt-work&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Espresso Idling Resource doesn’t work
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://baiduhix.blogspot.com/2015/07/android-espresso-ondata-error.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android espresso onData error&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;tags: Android, 测试&lt;/p&gt;
&lt;p&gt;对于基于 UI 的功能测试的需求其实一直存在，理由其实很简单，不想一直让人去做重复机械的事情，而且可靠性完全是靠人力的堆积产生。然而现在行业大多数公司的功能测试工作依然主要是依靠人工来完成，从我们公司的实践来看我觉得有几个方
    
    </summary>
    
    
      <category term="Android" scheme="http://ohmerhe.com/tags/Android/"/>
    
      <category term="测试" scheme="http://ohmerhe.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>在树莓派上用 Docker 安装 Gogs</title>
    <link href="http://ohmerhe.com/2016/12/29/raspberry_install_gogs_with_docker/"/>
    <id>http://ohmerhe.com/2016/12/29/raspberry_install_gogs_with_docker/</id>
    <published>2016-12-29T15:07:43.000Z</published>
    <updated>2016-12-29T15:10:30.000Z</updated>
    
    <content type="html">&lt;p&gt;这里假设在你的树莓派上已经装好了 Docker，之前装 Docker 的时候稍微折腾了一下，但是遗憾的是，当时没有记录下来，后面有机会再分享这一部分。&lt;/p&gt;
&lt;p&gt;通过搜索可以找到 &lt;code&gt;Gogs&lt;/code&gt; 官方为树莓派提供的 Docker 镜像，直接拉取下来。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Pull image from Docker Hub.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo docker pull gogs/gogs-rpi:0.9.46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Create local directory for volume.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$  mkdir -p /var/gogs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Use `docker run` for the first time.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs-rpi:0.9.46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Use `docker start` if you have stopped it.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo docker start gogs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样你就可以通过访问 &lt;code&gt;localhost:10080&lt;/code&gt; 访问 &lt;code&gt;Gogs&lt;/code&gt; 页面了（你也可以通过 &lt;code&gt;ip&lt;/code&gt; 访问）,第一次进去是需要配置一下的。数据库的话，如果你是自己个人用的话，可以直接选 &lt;code&gt;SQLite&lt;/code&gt;，简单一点。如果是提供给大家的公共服务，可以选择 &lt;code&gt;MYSQL&lt;/code&gt; 或者 &lt;code&gt;POSTGRES&lt;/code&gt;。由于使用 Docker 的原因，这里有几个配置需要额外注意。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Domain&lt;/code&gt;，访问 &lt;code&gt;Gogs&lt;/code&gt; 的域名，如果你要提供给外部机器访问的话，这里要填你的机器的 &lt;code&gt;ip&lt;/code&gt; 或者域名；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTP Port&lt;/code&gt;，这里要填 &lt;code&gt;Gogs&lt;/code&gt; 在容器里的监听的端口号，一般是 &lt;code&gt;3000&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SSH Port&lt;/code&gt;，与上面的相反，这里要填机器暴露给访问者的端口，而不是容器内部 SSH 服务监听的端口，如我们用 &lt;code&gt;10022:22&lt;/code&gt; 通过 &lt;code&gt;10022&lt;/code&gt; 端口暴露，则使用 &lt;code&gt;10022&lt;/code&gt; 这个值；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ROOT_URL&lt;/code&gt;，是提供给外部访问网站的公开 URL，如 &lt;code&gt;http://192.168.99.100:10080/&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他的都可以使用默认值。如果在配置完了以后发现有配的不对的地方，也可以通过修改 &lt;code&gt;/var/gogs/gogs/conf/app.ini&lt;/code&gt; 这个文件，再重启服务。&lt;/p&gt;
&lt;p&gt;这些信息配置好以后，就可以进入网站了。 &lt;code&gt;Gogs&lt;/code&gt; 和 &lt;code&gt;Gitlab&lt;/code&gt; 有一点差别，默认并不提供一个管理员账号，而是将第一个注册的账号默认设置为管理员账号，这个账号是不需要邮箱验证的。&lt;/p&gt;
&lt;p&gt;更多关于 Gogs 在 Docker 的配置信息可以参考 &lt;a href=&quot;https://github.com/gogits/gogs/tree/master/docker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker for Gogs&lt;/a&gt;，关于更多 Gogs 的配置信息可以参考 &lt;a href=&quot;https://gogs.io/docs/advanced/configuration_cheat_sheet.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Configuration Cheat Sheet&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gogits/gogs/tree/master/docker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker for Gogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gogs.io/docs/advanced/configuration_cheat_sheet.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Configuration Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这里假设在你的树莓派上已经装好了 Docker，之前装 Docker 的时候稍微折腾了一下，但是遗憾的是，当时没有记录下来，后面有机会再分享这一部分。&lt;/p&gt;
&lt;p&gt;通过搜索可以找到 &lt;code&gt;Gogs&lt;/code&gt; 官方为树莓派提供的 Docker 镜像，直接拉取下来。
    
    </summary>
    
    
      <category term="树莓派" scheme="http://ohmerhe.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Docker" scheme="http://ohmerhe.com/tags/Docker/"/>
    
      <category term="Git" scheme="http://ohmerhe.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>沪江学习安卓端应用架构重构</title>
    <link href="http://ohmerhe.com/2016/12/24/hjstudy_android_refactor/"/>
    <id>http://ohmerhe.com/2016/12/24/hjstudy_android_refactor/</id>
    <published>2016-12-24T05:51:56.000Z</published>
    <updated>2016-12-29T15:11:01.000Z</updated>
    
    <content type="html">&lt;p&gt;对于大的架构重构，其实我们一直很谨慎的。我们的原则是将重构融合在每次迭代中，逐步优化代码的结构。这次针对整个应用的架构的调整的背景是公司移动开发部门的人数和项目越来越多，当初设计的移动端的架构让项目的依赖关系越来越复杂，维护成本也越来越高。刚好赶上公司产品的特别需求，我们决定梳理并优化一下整个项目解构。最后，我们还是将整个重构的过程融合在每个迭代中，逐步完成一次大的架构升级。&lt;/p&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xpox6.com1.z0.glb.clouddn.com/2016-11-21-18-00-43.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图所示，这次重构围绕一个老生常谈的概念「解耦」展开，设定几个目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清晰划分各模块的角色&lt;/li&gt;
&lt;li&gt;明确架构层级及各个模块所在的层级&lt;/li&gt;
&lt;li&gt;提高整个架构横向扩展的能力&lt;/li&gt;
&lt;li&gt;提高编译效率，由于我们项目大量使用 Kotlin 开发和 AOP 技术，在编译上面个比较耗时，期望在架构调整后，在整个项目的编译效率上又一次大的提升&lt;/li&gt;
&lt;li&gt;各模块独立开发，面向接口和协议编程&lt;/li&gt;
&lt;li&gt;提高可维护性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;现状&quot;&gt;&lt;a href=&quot;#现状&quot; class=&quot;headerlink&quot; title=&quot;现状&quot;&gt;&lt;/a&gt;现状&lt;/h2&gt;&lt;p&gt;在重构之前，我们的应用架构可以大致分为两层，应用层和 Library 层。一些通用的 Library 主要由专门的部门的同事维护，各业务线也会有一些自己维护的依赖库，也属于 Library 层。各业务线的主应用通过直接依赖的方式使用所需要 Library 提供的功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpox6.com1.z0.glb.clouddn.com/2016-11-22-13-38-20.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;各个 Library 之间的依赖关系也是通过直接依赖的方式，由于没有一个明确的层级划分，随着 Library 数量的不断增加，他们之间的依赖关系变得越来越复杂，大致是这样一个状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpox6.com1.z0.glb.clouddn.com/2016-11-22-13-32-46.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样的应用架构在一个相对小的团队中，可以很好的满足需求，将单独的功能模块和业务模块直接抽离成依赖库的方式去维护，可以降低模块之间的耦合性，又能保证不同应用能够使用统一的公共服务（Library）。但当开发团队发展到一定规模，由于模块数据的增加，模块之间的依赖关系错综复杂，各业务线的业务需求千差万别，这样简单的架构就会显得捉襟见肘了。下面的情况常常让人很头疼。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;依赖库之间的强依赖。其中一个最为突出的问题，就是库与库之间的强依赖关系。比如我用了一个库 A，A 使用 B 库来实现网络访问，但是在我的主项目中 C 来实现的网络请求。这种情况就会导致在主项目中同时依赖了两个网络请求库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;未知调用潜在风险大，版本升级成本高。由于没有明确的接口约定，往往会发生修改某个看似不会被外面调用到的方法，却导致某个项目的崩溃。同时由于依赖关系的复杂性，当一个项目发生升级以后，需要花很大的精力去确定到具体影响到哪些项目。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;模块方案发生变化，上层修改成本大。由于是直接依赖的方式，在使用依赖库的时候，大家常常是直接使用库里面提供的接口，这样当某个功能需要切换实现方案的时候往往会导致上层代码的大量修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;依赖库之间的版本冲突。主项目依赖的某库的版本和依赖库里面所依赖的同样的库的版本发生冲突。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;功能模块兼容性导致维护成本大。在层次关系不够清晰、只有模块划分的时候，各业务线对公共模块需求有所差异，导致库的兼容代码越来越多，不易维护。甚至当某个模块为了满足某个业务线的特殊需求而影响到其他业务的正常使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的这些问题，如果在规模相对小的团队中，也许表现的不是特别突出，但是当团队规模到达一定程度，存在多条主开发团队在开发不同的业务，同时又想共用许多公共模块的时候，就会经常困扰开发团队。我们可用通过一些规范或约定来规范大家的行为减少这些问题发生，也可以通过构建一些辅助工具或平台帮助我们将一些问题提前暴露出来而不至于影响到线上应用，但这终究是治标不治本。&lt;/p&gt;
&lt;h2 id=&quot;重构方案&quot;&gt;&lt;a href=&quot;#重构方案&quot; class=&quot;headerlink&quot; title=&quot;重构方案&quot;&gt;&lt;/a&gt;重构方案&lt;/h2&gt;&lt;p&gt;整个架构的核心思想是面向接口编程和依赖注入使各个模块之间实现解耦，然后通过横向角色划分与纵向层级划分的方式约定各个模块之间的关系，再通过接口分层的方式，明确具体模块在不同层级上需要实现的功能，最后 AOP 横向切入的方式，去实现测试、调试工具、插桩等行为。&lt;/p&gt;
&lt;h3 id=&quot;面向接口与依赖注入&quot;&gt;&lt;a href=&quot;#面向接口与依赖注入&quot; class=&quot;headerlink&quot; title=&quot;面向接口与依赖注入&quot;&gt;&lt;/a&gt;面向接口与依赖注入&lt;/h3&gt;&lt;p&gt;面向接口和依赖注入是我们这次重构的核心思想，通过接口的方式，约定各个模块对外暴露的功能，再用依赖注入的方式实现模块间的完全解耦。&lt;/p&gt;
&lt;h4 id=&quot;面向接口编程&quot;&gt;&lt;a href=&quot;#面向接口编程&quot; class=&quot;headerlink&quot; title=&quot;面向接口编程&quot;&gt;&lt;/a&gt;面向接口编程&lt;/h4&gt;&lt;p&gt;面向接口编程的概念可以在网上找到很多描述，上面详细的说明了面向接口编程的好处。这里我简单说一下我们想要使用面向接口编程的理由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;只暴露想暴露的部分，在直接依赖的开发模式下，开发人员对于另一个依赖库提供的接口没有一个清晰的界限，常常使用到了该库的设计人员并没有计划暴露的方法。这样在该库升级的时候，就不会考虑到这些方法的版本兼容，以至于导致意想不到的意外。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;改变编程方式，由于开发过程中，开发人员容易处在边开发边设计的状态，尤其是对于一些入门不是很久的开发，根本没有提前抽象和整理需求的习惯。通过面向接口编程的方式可以逼迫开发人员在开始编写代码之前，进行更多的思考，和其他人达成共识。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对需求的高度抽象，在使用面向接口的方式时，由于接口是对某个功能需求抽象，所以不会对具体的实现形成依赖，当某个功能需求的具体实现需要发生改变时，对于使用该功能的调用方完全是透明。 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;依赖注入&quot;&gt;&lt;a href=&quot;#依赖注入&quot; class=&quot;headerlink&quot; title=&quot;依赖注入&quot;&gt;&lt;/a&gt;依赖注入&lt;/h4&gt;&lt;p&gt;依赖注入在我们看来是在面向接口编程的基础上再往前走了一步，让模块之间彻底解耦。在单纯的面向接口编程中，如果你需要使用某个功能模块的功能，你本身还是需要依赖对应的模块，并且需要初始化对应的实现。通过依赖注入的方式，使用方本身不用关注具体实现的初始化。而是由统一的注入模块将实现注入，调用方只需要和接口进行交互。这样做的好处是让模块间彻底解耦，也不会担心由于引入某个依赖库而导致引入一些本不想引入的库。&lt;/p&gt;
&lt;h3 id=&quot;层级划分与角色划分&quot;&gt;&lt;a href=&quot;#层级划分与角色划分&quot; class=&quot;headerlink&quot; title=&quot;层级划分与角色划分&quot;&gt;&lt;/a&gt;层级划分与角色划分&lt;/h3&gt;&lt;p&gt;在我们的架构中，总体分为三个层次：底层、组件层和应用层。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpox6.com1.z0.glb.clouddn.com/2016-12-20-14-59-03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;底层，底层是包含三个部分，分别为接口层、基础类层、SDK 扩展层。接口层是对上层功能组件和业务组件的接口定义。基础类层是本公司对一些 Android 原生类的进一步封装，这种封装往往抽象了本公司某些类的共有需求，但不含有任何具体业务的实现，如 BaseActivity 这种。SDK 层是对 Android 原生提供接口的强化或扩展，如对线程管理的优化。当在公司选定某种框架作为底层框架时（如：Kotlin 的标准库）也属于底层的 SDK。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;组件层，分为功能组件、业务组件和试图组件。功能组件往往是技术实现的封装，如网络请求模块、图片加载模块等。业务组件包含两个部分，一是公司通用业务的封装，如登录模块、意见反馈模块等；二是业务线自己为了解耦拆分出来的子业务模块。试图组件是大家平时积累的通用试图组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用层，在我们的架构中，应用层的东西应该很少，主要负责对所有子业务模块进行整合成为一个完整的 App，主要体现在 Splash 页面、首页等，这个时候的应用更像是一个空架子，而很少有具体的业务实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外还有一个很重要的 DI 控制模块，这一层主要负责将具体接口的实现注入，这一层本身可以脱离主项目存在，但介于现在 Android 还没有一个较为满意的依赖注入框架，暂时我们先放在应用层，后面计划封装成一个单独的框架，就可以实现类似 Sprint 用配置文件的方式来控制依赖注入，然后通过使用 AOP 的方式进行初始化，这样整个依赖注入控制模块就和主项目没有任何直接的关联了。&lt;/p&gt;
&lt;p&gt;除了在每层的角色划分外，还有一个 Common Utils 模块，这是一个并列与所有层级存在的一个模块，可以被任何一个模块引用。&lt;/p&gt;
&lt;h3 id=&quot;接口纵向分层和横向分类&quot;&gt;&lt;a href=&quot;#接口纵向分层和横向分类&quot; class=&quot;headerlink&quot; title=&quot;接口纵向分层和横向分类&quot;&gt;&lt;/a&gt;接口纵向分层和横向分类&lt;/h3&gt;&lt;h4 id=&quot;纵向分层&quot;&gt;&lt;a href=&quot;#纵向分层&quot; class=&quot;headerlink&quot; title=&quot;纵向分层&quot;&gt;&lt;/a&gt;纵向分层&lt;/h4&gt;&lt;p&gt;在多线开发过程中，针对某个功能模块抽象出来的接口，要么不能满足所有产线的需求，要么会定义一些其他线不需要的接口。所以针对这样的过程我们考虑了接口纵向分层的概念，如果在一个相对小的合作团队中，可以不考虑这个问题。比如在网络请求这个功能模块的封装，我们将接口层分为 Common 接口层和业务接口层。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Common 接口层只定义通用的网络请求的接口，不包含任何产线对网络请求模块额外定义的功能。会有一个通用的网络实现库区实现这一层的接口，基于 Volley、OkHttp 或者 Android-Async-Http 去实现接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;业务接口层是每个产线针对自己的业务需求对网络请求功能进行的特殊定义，如对返回状态码的处理、API 层级的业务缓存和网络加密验证等。这种业务有的产线需要，有的产线不需要，即使都需要也可能出现需要定义的接口千差万别，所以每个产线单独定义这一层的接口，当然这层接口的实现也是由产线自己封装实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpox6.com1.z0.glb.clouddn.com/2016-12-20-14-58-10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;横向分类&quot;&gt;&lt;a href=&quot;#横向分类&quot; class=&quot;headerlink&quot; title=&quot;横向分类&quot;&gt;&lt;/a&gt;横向分类&lt;/h4&gt;&lt;p&gt;关于接口层里面不同功能模块的接口以怎样的形式组合和依赖，有两种方式，一种是在同一接口层的所有接口都放在一个库里面，所有需要用到任何接口的部分，都依赖这个接口库；还有一种是将接口和具体实现放在一个项目一起维护，只是这个模块提供两个依赖库：接口库和实现库。这两种实现方案各有利弊。&lt;/p&gt;
&lt;p&gt;第一种方案方便使用方的理解和使用，对于使用方只需要知道接口这个库，其他不需要知道，当有接口不满足的话，直接提需求就可以了。弊端是在任何一个模块的接口发生变化，都需要更新整个接口层，不过好在 Gradle 通过依赖合并的方式解决了这个问题，你只需要在你需要升级接口的地方升级，其他地方如果跟这次接口升级没有关系的话，依然可以使用老的版本。&lt;/p&gt;
&lt;p&gt;第二种方案比较方便于模块维护人员的维护，当你需要升级接口时能够在一个项目里面同时把接口层和实现层同时升级掉。第二种方案的缺陷也是很明显的，这样在接口层之前形成的依赖关系，又会和之前模块之间形成的依赖关系一样复杂，对于使用方还是要去理解复杂的依赖关系。&lt;/p&gt;
&lt;p&gt;结合这两种方案的优缺点，我们选择一个相对折中的方案，在同一层级的接口上进行横向分类，这样将整个接口层分成几个大的接口库去维护，这样能够有效降低一些模块变化对整个接口库版本的升级的影响，同时也可以减少一个接口库同时维护人员的数量，如果分配合理的话，甚至可以每个接口库和对应的实现层都是一个人维护，同样降低维护人员的成本。当然如果你们的接口本身就很少，就不用为这个问题烦恼了。&lt;/p&gt;
&lt;h3 id=&quot;消息通讯&quot;&gt;&lt;a href=&quot;#消息通讯&quot; class=&quot;headerlink&quot; title=&quot;消息通讯&quot;&gt;&lt;/a&gt;消息通讯&lt;/h3&gt;&lt;p&gt;除了通过接口实现模块间的通讯方式，我们还设计了一套内部通讯协议，用于在应用内部消息通讯。对于一些易变的、灵活的、简单的通讯，可以直接通过发送消息的方式进行通讯。在任何一个想要接受到消息的地方，只要监听对应的消息就可以了，不管你是在主线程或者子线程。&lt;/p&gt;
&lt;h3 id=&quot;AOP&quot;&gt;&lt;a href=&quot;#AOP&quot; class=&quot;headerlink&quot; title=&quot;AOP&quot;&gt;&lt;/a&gt;AOP&lt;/h3&gt;&lt;p&gt;我们是从解决Android 6.0 的权限处理问题引入 AOP 技术的，为了在不影响之前的代码的情况下，我们通过横向切入的方式解决了这个问题。&lt;/p&gt;
&lt;p&gt;除了解决类似这种问题以外，我们使用 AOP 技术来实现只在 Debug 包才需要的功能，如一些测试的辅助工具、快速调试工具（调试板）等。这些功能只会出现在 Debug 包中，又不会影响到主项目的代码。&lt;/p&gt;
&lt;h2 id=&quot;实施过程&quot;&gt;&lt;a href=&quot;#实施过程&quot; class=&quot;headerlink&quot; title=&quot;实施过程&quot;&gt;&lt;/a&gt;实施过程&lt;/h2&gt;&lt;p&gt;我们将整个重构融合到每个迭代中，逐步实现一次架构的大调整，为了保证业务正常的进行，同时进行平稳的重构，我们把整个实施过程进行了细致的划分，这里大概总结下我们的实施过程。&lt;/p&gt;
&lt;h3 id=&quot;从底层开始着手&quot;&gt;&lt;a href=&quot;#从底层开始着手&quot; class=&quot;headerlink&quot; title=&quot;从底层开始着手&quot;&gt;&lt;/a&gt;从底层开始着手&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;将 Common Utils 和 SDK 扩展层逐步独立到单独的库。&lt;/li&gt;
&lt;li&gt;将 Base View 逐步独立到单独的库。&lt;/li&gt;
&lt;li&gt;将 Base Class 逐步独立到单独的库。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;抽离功能模块&quot;&gt;&lt;a href=&quot;#抽离功能模块&quot; class=&quot;headerlink&quot; title=&quot;抽离功能模块&quot;&gt;&lt;/a&gt;抽离功能模块&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;将功能模块的接口逐步定义完成，并在对应的库提供相应的实现。&lt;/li&gt;
&lt;li&gt;在主项目完成功能模块的依赖注入。&lt;/li&gt;
&lt;li&gt;将对于功能模块的调用逐步换成接口的调用方式。&lt;/li&gt;
&lt;li&gt;去掉之前的依赖关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;抽离公共视图模块&quot;&gt;&lt;a href=&quot;#抽离公共视图模块&quot; class=&quot;headerlink&quot; title=&quot;抽离公共视图模块&quot;&gt;&lt;/a&gt;抽离公共视图模块&lt;/h3&gt;&lt;p&gt;在抽取公共试图的时候需要区分哪些是属于哪些是公共试图，哪些是具体业务定制的试图。将属于公共的部分逐步抽离到公共试图库。需要说明的是，公共试图模块不一定是一个单独的库，可以根据需要拆分成不同的库，只要保证整个都在试图模块这一范畴就可以了。&lt;/p&gt;
&lt;h3 id=&quot;抽离公共业务模块&quot;&gt;&lt;a href=&quot;#抽离公共业务模块&quot; class=&quot;headerlink&quot; title=&quot;抽离公共业务模块&quot;&gt;&lt;/a&gt;抽离公共业务模块&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义公共业务模块的接口，并提供实现。&lt;/li&gt;
&lt;li&gt;完成依赖注入和调用替换。&lt;/li&gt;
&lt;li&gt;依赖关系解除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在抽离业务模块的时候，当业务模块提供了试图直接给外部使用，个人建议是将试图部分和具体的业务实现拆分到不同的 Model。试图属于试图模块，通过调用接口的方式实现内部逻辑。主项目或者其他模块需要使用该试图的时候，可以直接依赖（业务模块可以直接依赖任何试图组件）。&lt;/p&gt;
&lt;h3 id=&quot;抽离产线业务模块&quot;&gt;&lt;a href=&quot;#抽离产线业务模块&quot; class=&quot;headerlink&quot; title=&quot;抽离产线业务模块&quot;&gt;&lt;/a&gt;抽离产线业务模块&lt;/h3&gt;&lt;p&gt;和抽离公共业务模块的步骤类似。&lt;/p&gt;
&lt;h3 id=&quot;DI-控制框架封装&quot;&gt;&lt;a href=&quot;#DI-控制框架封装&quot; class=&quot;headerlink&quot; title=&quot;DI 控制框架封装&quot;&gt;&lt;/a&gt;DI 控制框架封装&lt;/h3&gt;&lt;p&gt;实现 DI 的配置化框架。&lt;/p&gt;
&lt;h2 id=&quot;需要注意的问题&quot;&gt;&lt;a href=&quot;#需要注意的问题&quot; class=&quot;headerlink&quot; title=&quot;需要注意的问题&quot;&gt;&lt;/a&gt;需要注意的问题&lt;/h2&gt;&lt;p&gt;在重构过程中，还会碰到平时写代码由于不注意导致的隐形的坑，比如我们碰到过一个在库里面存在类型强转导致的问题。这种问题不可避免，但是如果你在平时写代码时比较遵守代码规范，这种问题应该会相对较少。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kotlin 试图文件目录迁移，Layout 不会修改对应的类名，需要手工确认，这个时候可以编写一些脚本才做这个事前。&lt;/li&gt;
&lt;li&gt;目录调整后，proguard 过滤文件相应的调整。&lt;/li&gt;
&lt;li&gt;如果之前一些模块在主项目已经以单独的包存在的时候，在抽离到单独的库的时候，把之前关于这个目录的 git 记录保留。&lt;/li&gt;
&lt;li&gt;当新增一个子模块的时候，可以先以代码的方式成为主项目的 Model 依赖，在相对稳定以后再提供 Maven 库依赖。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于大的架构重构，其实我们一直很谨慎的。我们的原则是将重构融合在每次迭代中，逐步优化代码的结构。这次针对整个应用的架构的调整的背景是公司移动开发部门的人数和项目越来越多，当初设计的移动端的架构让项目的依赖关系越来越复杂，维护成本也越来越高。刚好赶上公司产品的特别需求，我们决
    
    </summary>
    
    
      <category term="Android" scheme="http://ohmerhe.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Library 不支持调试模式，不能忍</title>
    <link href="http://ohmerhe.com/2016/08/30/android_library_debug/"/>
    <id>http://ohmerhe.com/2016/08/30/android_library_debug/</id>
    <published>2016-08-30T09:28:49.000Z</published>
    <updated>2016-08-30T10:12:44.000Z</updated>
    
    <content type="html">&lt;p&gt;tags: Android, Gradle&lt;/p&gt;
&lt;p&gt;在 Android 开发过程中，&lt;code&gt;BuildConfig.Debug&lt;/code&gt; 这个变量用来判断当前运行环境是不是支持调试模式。我们常常利用这个变量的判断在开发或者测试包中做一些代码追踪、测试工具开启、调试信息等工作。不过在 Android 依赖库中默认编译出来的包并不会像编译应用一样默认会自动生成 release 和 debug 两种包，它只会默认生成 release 一个版本的包，可以参考&lt;a href=&quot;http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Referencing-a-Library&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。在 release 版本的包里面，除非你有做过改动，不然默认 debuggable 这个值是 false。&lt;/p&gt;
&lt;p&gt;常见的依赖库的使用方式有两种，一种是把依赖库的作为一个模块和主项目一起编译，也就是文件依赖；另一种是使用 aar 的方式引用，下面分别针对两种不同的提供对应得解决方案。&lt;/p&gt;
&lt;h2 id=&quot;文件依赖方式&quot;&gt;&lt;a href=&quot;#文件依赖方式&quot; class=&quot;headerlink&quot; title=&quot;文件依赖方式&quot;&gt;&lt;/a&gt;文件依赖方式&lt;/h2&gt;&lt;p&gt;其实 &lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=52962&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个问题&lt;/a&gt; 早在 2013 年就有人在 Google Group 上提出来。根据 &lt;a href=&quot;http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Library-Publication&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;，我们可以通过控制 &lt;code&gt;publishNonDefault&lt;/code&gt; 这个变量的配置来使得依赖库在编译的时候默认生成所有变种的包，而不是仅仅生成 release 一种。&lt;/p&gt;
&lt;p&gt;在依赖项目中添加这个配置：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;android &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    publishNonDefault &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样在编译完成后，默认情况下我们可以在输出目录看到两个 aar 文件（之前只有一个）。然后在项目中声明依赖的时候，区分不同的编译类型进行依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    debugCompile project(&lt;span class=&quot;string&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;:myLocalLibrary&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;configuration:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;debug&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    releaseCompile project(&lt;span class=&quot;string&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;:myLocalLibrary&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;configuration:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;release&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样在调试应用的过程中会使用依赖库的 debug 版本，而在正式发布应用的时候就会用 release 版本。&lt;/p&gt;
&lt;h2 id=&quot;AAR-依赖方式&quot;&gt;&lt;a href=&quot;#AAR-依赖方式&quot; class=&quot;headerlink&quot; title=&quot;AAR 依赖方式&quot;&gt;&lt;/a&gt;AAR 依赖方式&lt;/h2&gt;&lt;p&gt;Library 还有一种更为常见的依赖方式——aar 依赖。当然如果是正式发布的依赖库，不支持 debug 功能是很合理并且应该鼓励的。但是，不能忽视的是在我们开发过程频繁使用的 snapshot 版本，这是开发过程中的测试版本，在这个版本中支持调试功能即合理也很有必要。&lt;/p&gt;
&lt;p&gt;在前面官方文档中，我们发现还有一个配置信息可以利用 &lt;code&gt;defaultPublishConfig&lt;/code&gt;。这个变量用于指定使用哪个变种的包作为默认编译的版本。默认这个值是 &lt;code&gt;release&lt;/code&gt;。你可以在项目的配置添加：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;android &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    defaultPublishConfig &amp;quot;debug&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;这个配置项后面的值是编译变种的全称，如果对于变种（variants）的概念不是很熟悉的话，可以回去再看看 Google 的 &lt;a href=&quot;https://developer.android.com/studio/build/build-variants.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;定义&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果没有定义针对变种做过配置的话，默认支持 &lt;code&gt;release&lt;/code&gt; 和 &lt;code&gt;debug&lt;/code&gt; 两种，这是根据这两种默认编译类型自动生成的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里有一个明显的 bug，必须在发布正式包和 snapshot 包的时候手动切换配置项的值。在我的项目中，我在发布 aar 包的时候，是通过在 &lt;code&gt;gradle.properties&lt;/code&gt; 这个文件添加 &lt;code&gt;isRelease&lt;/code&gt; 这个变量来区分的。当这个值是 &lt;code&gt;true&lt;/code&gt; 的时候则会发布正式包，反之则发布 snapshot 版本。于是我也利用这个值来控制这个配置项的配置：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;android &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	defaultPublishConfig System.properties[&amp;apos;isRelease&amp;apos;].toBoolean() ? &amp;quot;release&amp;quot; : &amp;quot;debug&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;在 Groovy 中看到熟悉的三目运算好亲切啊，想到在 Kotlin 中没有三目运算就心塞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样在发布依赖包时，就能自动实现在 snapshot 包支持调试功能，而不影响正式包。&lt;/p&gt;
&lt;h2 id=&quot;其他方案&quot;&gt;&lt;a href=&quot;#其他方案&quot; class=&quot;headerlink&quot; title=&quot;其他方案&quot;&gt;&lt;/a&gt;其他方案&lt;/h2&gt;&lt;h3 id=&quot;代码注入&quot;&gt;&lt;a href=&quot;#代码注入&quot; class=&quot;headerlink&quot; title=&quot;代码注入&quot;&gt;&lt;/a&gt;代码注入&lt;/h3&gt;&lt;p&gt;如果不使用这种方式，在代码层面想办法绕过这个限制也不是特别困难。比如我们可以在依赖库中提供接口，然后在项目中将是否支持 Debug 状态的判断注入到依赖库中，从而实现依赖库和主项目之间的 Debug 状态保持一致。&lt;/p&gt;
&lt;p&gt;虽然这种方案也可以解决问题，但是我个人不是很推荐。这种配置方式本身和依赖库的功能没有关联性，而且无形增加了依赖库的接入成本。&lt;/p&gt;
&lt;h3 id=&quot;手动修改&quot;&gt;&lt;a href=&quot;#手动修改&quot; class=&quot;headerlink&quot; title=&quot;手动修改&quot;&gt;&lt;/a&gt;手动修改&lt;/h3&gt;&lt;p&gt;还有一种方案，是在依赖库编译完成之后，通过判断当前编译变种的类型，手动去修改 &lt;code&gt;BuildConfig&lt;/code&gt; 里面的值。这种方案无形增加了解决问题的复杂度，和前面利用官方配置项没有本质区别。根据这种方案的提出的时间，我猜测这应该是在官方支持如上描述的配置方案之前的方案。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tools.android.com/tech-docs/new-build-system/user-guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Plugin User Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.codepath.com/android/Building-your-own-Android-library&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building your own Android library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=52962&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Issue 52962:    Gradle plugin does not propagate debug/release to dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;tags: Android, Gradle&lt;/p&gt;
&lt;p&gt;在 Android 开发过程中，&lt;code&gt;BuildConfig.Debug&lt;/code&gt; 这个变量用来判断当前运行环境是不是支持调试模式。我们常常利用这个变量的判断在开发或者测试包中做一些代码追踪、测试工具开启、
    
    </summary>
    
    
      <category term="Android" scheme="http://ohmerhe.com/tags/Android/"/>
    
      <category term="Gradle" scheme="http://ohmerhe.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin：The Good, The Bad, and The Ugly(译)</title>
    <link href="http://ohmerhe.com/2016/08/27/kotlin_good_bad_bugly/"/>
    <id>http://ohmerhe.com/2016/08/27/kotlin_good_bad_bugly/</id>
    <published>2016-08-27T08:59:00.000Z</published>
    <updated>2016-08-28T07:09:04.000Z</updated>
    
    <content type="html">&lt;p&gt;tags: Kotlin, Android&lt;/p&gt;
&lt;p&gt;在我的 &lt;a href=&quot;https://medium.com/keepsafe-engineering/lessons-from-converting-an-app-to-100-kotlin-68984a05dcb6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;上一篇文章&lt;/a&gt;, 谈到了关于转换 Java 到 Kotlin 代码和我喜欢的一些库。现在，我想要谈谈关于 Kotlin 这门语言本身的想法，还有它和 Java 交互的方式。&lt;/p&gt;
&lt;h2 id=&quot;The-Good&quot;&gt;&lt;a href=&quot;#The-Good&quot; class=&quot;headerlink&quot; title=&quot;The Good&quot;&gt;&lt;/a&gt;The Good&lt;/h2&gt;&lt;p&gt;Kotlin 有许多让人喜欢的理由。像 &lt;code&gt;null safety&lt;/code&gt;、&lt;code&gt;property access&lt;/code&gt; 和 &lt;code&gt;unchecked exceptions&lt;/code&gt; 类似这些明显的特性在 &lt;a href=&quot;https://blog.jetbrains.com/kotlin/2016/01/kotlin-digest-2015/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;publications&lt;/a&gt; 都有描述，我就不重复了。我只讲一些我真正喜欢但很少被提到的特性。&lt;/p&gt;
&lt;h3 id=&quot;Automatic-conversion-of-Java-to-Kotlin&quot;&gt;&lt;a href=&quot;#Automatic-conversion-of-Java-to-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Automatic conversion of Java to Kotlin&quot;&gt;&lt;/a&gt;Automatic conversion of Java to Kotlin&lt;/h3&gt;&lt;p&gt;JetBrains 在 IntelliJ 中集成了 &lt;code&gt;Java to Kotlin converter&lt;/code&gt; 为我们节约了大量的时间。虽然它还不是很完美，但是它让你不用再重复输入。要是没有它，你将要花费大量的时间从 Java 代码转换成 Kotlin。&lt;/p&gt;
&lt;h3 id=&quot;lateinit-Delegates-notNull-and-lazy&quot;&gt;&lt;a href=&quot;#lateinit-Delegates-notNull-and-lazy&quot; class=&quot;headerlink&quot; title=&quot;lateinit, Delegates.notNull and lazy&quot;&gt;&lt;/a&gt;lateinit, Delegates.notNull and lazy&lt;/h3&gt;&lt;p&gt;Kotlin 的 &lt;code&gt;null safety&lt;/code&gt; 非常好，但是由于在 Android 的 Activity 生命周期的设计，你常常不得不在 &lt;em&gt;onCreate&lt;/em&gt; 这样的回调中初始化一个变量，而不是在类的构造函数中。假设你有一个属性需要定义，你肯定想要这样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;val name: String&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你必须在 &lt;code&gt;onCreate&lt;/code&gt; 中初始化这个属性，就不能用 &lt;code&gt;val&lt;/code&gt; 定义，而必须使用 &lt;code&gt;var&lt;/code&gt;。但是这样你必须在定义的时候为该属性提供一个值进行初始化，或者将它定义为可空类型：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var name: String? = null&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的确有效，但是当你每次使用它的时候都要进行空检查。虽然 Korlin 提供了友好的的空断言，但是在实践中即使你知道你的属性不会为空，你也不愿意到处使用 &lt;code&gt;!!&lt;/code&gt;。庆幸的是，Kotlin 提供了更好的方式：&lt;a href=&quot;https://kotlinlang.org/docs/reference/properties.html#late-initialized-properties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;lateinit&lt;/em&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.properties/-delegates/not-null.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Delegates.notNull&lt;/em&gt;&lt;/a&gt;。任何一个都能可以让你在不初始化的情况下定义一个非空类型。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;lateinit var name: String&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var age: Int by Delegates.notNull&amp;lt;Int&amp;gt;()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两种方式中，当你尝试在初始化之前访问该属性都会抛出异常。除了&lt;code&gt;lateinit&lt;/code&gt; 不能用于基础类型的定义，这两种方法没有什么大的差别。&lt;/p&gt;
&lt;p&gt;你还有第三种选择就是使用 &lt;code&gt;lazy&lt;/code&gt; 委托。如果一个属性能够利用其他属性或方法获得数据进行初始化，那么 &lt;code&gt;lazy&lt;/code&gt; 会是一个很好的选择。类似这样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;val imm: InputMethodManager by lazy &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面块里面的代码在第一次读取之前并不会执行，执行的结果会被保存起来以供后面使用，所以后面的代码块只会被执行一次。&lt;/p&gt;
&lt;h3 id=&quot;Functional-collection-extensions&quot;&gt;&lt;a href=&quot;#Functional-collection-extensions&quot; class=&quot;headerlink&quot; title=&quot;Functional collection extensions&quot;&gt;&lt;/a&gt;Functional collection extensions&lt;/h3&gt;&lt;p&gt;Kotlin 提供为集合和迭代类提供了大量的函数式 &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index.html#functions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;扩展方法&lt;/a&gt;。像 &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/any.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;any&lt;/em&gt;&lt;/a&gt;、 &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/join-to-string.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;joinToString&lt;/em&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/associate.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;associate&lt;/em&gt;&lt;/a&gt; 的方法能够帮助节约大量的时间，不用像 Java 里面一样手工编写 &lt;em&gt;for&lt;/em&gt; 循环去实现。&lt;/p&gt;
&lt;p&gt;Kotlin 还提供了大量的函数式集合操作的懒加载模式，在这种模式下载每个操作执行之前并不会进行集合的拷贝，但是在我的接受范围内，发现懒加载和即刻加载在性能上并没有什么大的差别。&lt;/p&gt;
&lt;h3 id=&quot;Named-and-default-function-arguments&quot;&gt;&lt;a href=&quot;#Named-and-default-function-arguments&quot; class=&quot;headerlink&quot; title=&quot;Named and default function arguments&quot;&gt;&lt;/a&gt;Named and default function arguments&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/functions.html#named-arguments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;命名参数&lt;/a&gt; 和 &lt;a href=&quot;https://kotlinlang.org/docs/reference/functions.html#named-arguments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;默认参数&lt;/a&gt; 是非常基础的，但它们让你不再需要重载方法，并且也替代了 Builder 模式的一种使用场景。&lt;/p&gt;
&lt;p&gt;根据具体使用场景，你甚至可以在依赖注入中将生产依赖作为默认参数，然后在测试的时候传入模拟的数据。&lt;/p&gt;
&lt;p&gt;例如，你在 &lt;code&gt;presenter&lt;/code&gt; 中需要一些全局状态，你可以这样定义构造函数：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;class Presenter(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        val okhttp: OkHttp = productionOkHttp(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        val picasso: Picasso = productionPicassoInstance()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) &amp;#123;...&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，你就你可以 &lt;code&gt;UI&lt;/code&gt; 代码中创建 &lt;code&gt;presenter&lt;/code&gt; 实例的时候不传递任何参数，但是在测试的时候可以传递模拟的实例作为参数。完整的依赖注入框架会更加强大，但这是一个一些简单语言构造的很好的例子。&lt;/p&gt;
&lt;h2 id=&quot;The-Bad&quot;&gt;&lt;a href=&quot;#The-Bad&quot; class=&quot;headerlink&quot; title=&quot;The Bad&quot;&gt;&lt;/a&gt;The Bad&lt;/h2&gt;&lt;p&gt;尽管 Kotlin 非常棒，但是它并不完美。我列举了一下我不喜欢的部分。&lt;/p&gt;
&lt;h3 id=&quot;No-namespaces&quot;&gt;&lt;a href=&quot;#No-namespaces&quot; class=&quot;headerlink&quot; title=&quot;No namespaces&quot;&gt;&lt;/a&gt;No namespaces&lt;/h3&gt;&lt;p&gt;Kotlin 允许你在文件中定义顶级的函数和属性。这是一个非常棒的特性，但是这会带来所有从 Kotlin 引用的顶级声明无法区分的困扰。有时，这让我们在读代码的时候很难快速确定用的是哪一个函数。&lt;/p&gt;
&lt;p&gt;例如，你定义这样一个顶级函数：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fun foo() &amp;#123;...&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以通过 &lt;code&gt;foo()&lt;/code&gt; 调用。如果你在不同的包里面也存在同样的方法，在调用侧不能明显区分出是调用的哪个方法。你可以通过在前面添加包名的方式去调用，但是如果 Java 约定的包名很深，似乎不太好。&lt;/p&gt;
&lt;p&gt;一种近似的解决方案是使用单例的 &lt;code&gt;object&lt;/code&gt; 类。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;object FooActions &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fun foo() &amp;#123;...&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样你在 Kotlin 中可以通过 &lt;code&gt;FooActions.foo()&lt;/code&gt; 调用，但是在 Java 代码中就不是那么友好了。在 Java 中你必须要这样 &lt;code&gt;FooActions.INSTANCE.foo()&lt;/code&gt; 这样调用，这看起来并不完美。你可以使用 &lt;code&gt;@JvmStatic&lt;/code&gt; 去注解你的方法从而省掉 &lt;code&gt;INSTANCE&lt;/code&gt;，这是你能做到的最好结果。这并不是什么大不了的事，但是如果 Kotlin 能够提供命名空间的话，能省不少事。&lt;/p&gt;
&lt;h3 id=&quot;No-static-modifier&quot;&gt;&lt;a href=&quot;#No-static-modifier&quot; class=&quot;headerlink&quot; title=&quot;No static modifier&quot;&gt;&lt;/a&gt;No static modifier&lt;/h3&gt;&lt;p&gt;无独有偶，Kotlin 提供为静态函数和属性提供了一个和 Java 不一样的处理方式。并不是说有多烂，只是觉得让代码变得不干净而且没有必要。例如，在 Android 的 &lt;code&gt;View&lt;/code&gt; 类中定义的静态属性 &lt;code&gt;View.VISIBLE&lt;/code&gt; 和静态函数 &lt;code&gt;View.inflate&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public class View &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static final int VISIBLE = 0x00000000;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static final int INVISIBLE = 0x00000004;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static View inflate(Context context, int resource) &amp;#123;...&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个定义是简单的。然而，在 Kotlin 代码中：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;class View &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    companion object &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        @JvmField &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        val VISIBLE: Int = 0x00000000&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        @JvmField &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        val INVISIBLE: Int = 0x00000004&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        @JvmStatic&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fun inflate(context: Context, resource: Int) &amp;#123;...&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;尽管 Kotlin 的版本并没有那么恐怖，但是它的复杂程度超过了我对这门语言的预期。如果把注解去掉，那么你在 Java 代码中不得不使用这样可怕的语法去调用：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// With annotations:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;View.VISIBLE;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//Without annotations:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;View.Companion.getVISIBLE();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;没有更好的方式去创建静态函数和属性让我感觉很奇怪。我知道 &lt;code&gt;companion objects&lt;/code&gt; 是真正的对象并且能够用来实现接口，但是这并不能足够说明能完全替代普通的静态声明。&lt;/p&gt;
&lt;h3 id=&quot;Automatic-conversion-of-Java-to-Kotlin-1&quot;&gt;&lt;a href=&quot;#Automatic-conversion-of-Java-to-Kotlin-1&quot; class=&quot;headerlink&quot; title=&quot;Automatic conversion of Java to Kotlin&quot;&gt;&lt;/a&gt;Automatic conversion of Java to Kotlin&lt;/h3&gt;&lt;p&gt;在我的第一篇帖子里这是我列出来的我喜欢 Kotlin 的愿意之一，并且它很好用。但是正由于它在 80% 的时候都运行的很好，它在一些场景的失败实在令人沮丧。&lt;/p&gt;
&lt;p&gt;Java 文档经常错位，特别是在段落横跨了好几行的时候。静态域和方法被转换成 &lt;code&gt;companion object&lt;/code&gt;，除非你手动添加为他们分别添加 &lt;code&gt;@JvmField&lt;/code&gt; 和 &lt;code&gt;@JvmStatic&lt;/code&gt; ，你之前 Java 调用代码不在有效而出错。&lt;/p&gt;
&lt;p&gt;由于 Kotlin 团队花了大量的时间在转换代码上，我相信这些问题一定会被修复的，因此我对这些问题保持乐观。&lt;/p&gt;
&lt;h3 id=&quot;Required-property-accessor-syntax&quot;&gt;&lt;a href=&quot;#Required-property-accessor-syntax&quot; class=&quot;headerlink&quot; title=&quot;Required property accessor syntax&quot;&gt;&lt;/a&gt;Required property accessor syntax&lt;/h3&gt;&lt;p&gt;Kotlin 提供一个很棒的语法糖叫做「属性访问语法」，它让你可以像访问 Kotlin 属性一样访问 &lt;code&gt;JavaBeans&lt;/code&gt; 类型的 &lt;code&gt;getters&lt;/code&gt; 和 &lt;code&gt;setters&lt;/code&gt; 方法。例如，你可以这样 &lt;code&gt;activity.context&lt;/code&gt; 调用 &lt;code&gt;Activity.getContext()&lt;/code&gt;，而不用写整个方法名。如果你在 Kotlin 使用传统的方式调用，lint 会给你一个警告告诉你使用「属性调用语法」。&lt;/p&gt;
&lt;p&gt;这是一个很好的特性，但是有时候我的方法名以 &lt;code&gt;get&lt;/code&gt; 开始，但是并不想使用「属性调用语法」。一个很常见的例子就是 Java 的原子类。如果你有一个变量 &lt;code&gt;val i = AtomicInteger()&lt;/code&gt;，你可能想通过 &lt;code&gt;i.getAndIncrement()&lt;/code&gt; 调用。但是 Kotlin 会想让你用 &lt;code&gt;i.andIncrement&lt;/code&gt; 这种方式调用。这明显是画蛇添足。&lt;/p&gt;
&lt;p&gt;你可以在每个调用的地方加上 &lt;code&gt;@Suppress(“UsePropertyAccessSyntax”)&lt;/code&gt;，但很丑。如果你可以为这个函数添加一个注解告诉 linter 不要把它当做一个属性会更好。&lt;/p&gt;
&lt;h3 id=&quot;Method-count&quot;&gt;&lt;a href=&quot;#Method-count&quot; class=&quot;headerlink&quot; title=&quot;Method count&quot;&gt;&lt;/a&gt;Method count&lt;/h3&gt;&lt;p&gt;用 Kotlin 写代码肯定会减少你项目中的代码行数。但是它也会提高你的代码在编译以后的方法数。有很多原因导致这一点，但是其中一个主要原因就是 Kotlin 属性的实现方式。&lt;/p&gt;
&lt;p&gt;和 Java 不一样，Kotlin 没有提供单独定义域的方式。你必须使用 &lt;code&gt;val&lt;/code&gt; 或者 &lt;code&gt;var&lt;/code&gt; 来声明变量。这样有一个好处，就是你可以随意为一个属性添加 &lt;code&gt;get&lt;/code&gt; 或 &lt;code&gt;set&lt;/code&gt; 方法而不会破坏其他地方对该属性引用的代码。这个特性省去了像 Java 一样定义 &lt;code&gt;getters&lt;/code&gt; 和 &lt;code&gt;setters&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;尽管如此，这个特性需要一定的成本。每一个公开的 &lt;code&gt;val&lt;/code&gt; 变量都会导致 Kotlin 生成一个「支持域」和一个能被 Java 调用的 &lt;code&gt;getter&lt;/code&gt; 方法。每一个公开的 &lt;code&gt;var&lt;/code&gt; 变量都会生成 &lt;code&gt;getter&lt;/code&gt; 和 &lt;code&gt;setter&lt;/code&gt; 方法。庆幸的是，私有属性的 &lt;code&gt;getters&lt;/code&gt; 和 &lt;code&gt;setters&lt;/code&gt; 会生成域而不是生成方法。如果你之前的 Java 代码中定义了大量的公开域（这在定义常量的时候很常见），你会惊奇的发现方法大幅上升。&lt;/p&gt;
&lt;p&gt;如果你的 Android 应用快接近方法数限制了，我建议你为不需要自定义 &lt;code&gt;getter&lt;/code&gt; 方法的常量加上 &lt;code&gt;@JvmField&lt;/code&gt; 注解。这样会阻止  &lt;code&gt;getters&lt;/code&gt; 方法的生成，从而减少你的方法数。「更新：Kirill Rakhman 在评论中指出，你可以使用 &lt;code&gt;const&lt;/code&gt; 修饰符替代 &lt;/p&gt;
&lt;p&gt;不过其实没有那么糟。就像我在 &lt;a href=&quot;https://medium.com/keepsafe-engineering/lessons-from-converting-an-app-to-100-kotlin-68984a05dcb6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;converting an app to 100% Kotlin&lt;/a&gt; 文章里讨论过的，Kotlin 的标准库非常小，并且能够替代 Java 的许多常用库，这些库通常都更大，现在你再也不需要他们了。多亏了 Kotlin 的标准库，在从 Java 全部转换到 Kotlin 以后方法数反而减少了。只要你控制不会出现大范围的方法数提升，就不会有什么问题。&lt;/p&gt;
&lt;h2 id=&quot;The-Ugly&quot;&gt;&lt;a href=&quot;#The-Ugly&quot; class=&quot;headerlink&quot; title=&quot;The Ugly&quot;&gt;&lt;/a&gt;The Ugly&lt;/h2&gt;&lt;p&gt;最后，Kotlin 有两个设计我不是很认同，而且我不期望这个在未来会有什么改变。&lt;/p&gt;
&lt;h3 id=&quot;SAM-conversion-and-Unit-returning-lambdas&quot;&gt;&lt;a href=&quot;#SAM-conversion-and-Unit-returning-lambdas&quot; class=&quot;headerlink&quot; title=&quot;SAM conversion and Unit returning lambdas&quot;&gt;&lt;/a&gt;SAM conversion and Unit returning lambdas&lt;/h3&gt;&lt;p&gt;这真是一个莫名其妙的设计。&lt;/p&gt;
&lt;p&gt;可以嵌入 lambda 表达式是 Kotlin 最好的特性之一。如果有一个 Java 函数，它只有一个 SAM 接口（只有一个抽象方法的接口）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public void registerCallback(View.OnClickListener r)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;无论是 Java 还是 Kotlin，你都可以传递一个普通的 lambda 表达式去调用它。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// Java&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;registerCallback(() -&amp;gt; &amp;#123; /** do stuff */ &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//Kotlin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;registerCallback &amp;#123; /** do stuff */ &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这的确很棒。但当你尝试去用 Kotlin 去定义类似的方法是莫名的困难。从 Java 测调用没有什么不同，但是当从 Kotlin 调用时需要明确指定类型。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fun registerCallback(r: View.OnClickListener)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// Kotlin. Note that parenthesis are required now.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;registerCallback(View.OnClickListener &amp;#123; /** do stuff */ &amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不得不说这很烦人，特别是当你从 Java 代码转换到 Kotlin 从而导致 Kotlin 代码不能再正常运行的时候。&lt;/p&gt;
&lt;p&gt;常见的方式是用函数类型定义：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fun registerCallback(r: () -&amp;gt; Unit)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 这样用 Kotlin 调用起来会很方便，但是由于所有的 Kotlin 函数都需要一个返回值，这导致用 Java 调用该函数的时候变得很糟。你不得不显式地从 Java 表达式返回 &lt;code&gt;Unit&lt;/code&gt;，这导致 lambda 表达式不可用：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; registerCallback(() -&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    /** do stuff */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return Unit.INSTANCE;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你在用 Kotlin 写库的话，根本找不到一个好的方式去实现一个高阶函数同时让 Java 和 Kotlin 都能方便的调用。在我的 &lt;a href=&quot;https://github.com/ajalt/flexadapter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FlexAdapter&lt;/a&gt; 库里面，我尝试为为每个方法重载 &lt;code&gt;SAM interface&lt;/code&gt; 或者 Kotlin 函数类型的参数。这样无论用这两种的哪种语言调用都很方便，但是库的 API 变得不简洁。&lt;/p&gt;
&lt;p&gt;希望 Kotlin 的设计者们能够改变他们的想法在将来允许 &lt;code&gt;SAM&lt;/code&gt; 转化成 Kotlin 的函数定义，但是我并不抱什么希望。&lt;/p&gt;
&lt;h3 id=&quot;Closed-by-default&quot;&gt;&lt;a href=&quot;#Closed-by-default&quot; class=&quot;headerlink&quot; title=&quot;Closed by default&quot;&gt;&lt;/a&gt;Closed by default&lt;/h3&gt;&lt;p&gt;到目前为止我说的所有关于 Kotlin 的缺点基本都是小的语法细节上的不简洁，并不是什么大事。但是，有一个设计在将来有可能导致巨大的痛苦：所有的类和方法默认都是封闭的。这种做法是被 &lt;code&gt;Effective Java&lt;/code&gt; 里所推崇的，理论上听起来也很有道理，但对于任何一个需要使用一个有缺陷的第三方库的人来说都是一个坏的选择。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把所有的叶类都设置成静态的。毕竟你在完成这样一个项目——没有人能够通过扩展你的类的方式来完善你的工作成果。或许是由于安全原因——毕竟，&lt;code&gt;java.lang.String&lt;/code&gt; 是 &lt;code&gt;final&lt;/code&gt; 不就是由于这个原因吗？如果你项目的其他的成员向你抱怨，就告诉他们这样能提高执行效率——&lt;a href=&quot;http://www.mindprod.com/jgloss/unmaindesign.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;em&gt;Roedy Green, How to Write Unmaintainable Code&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kotlin 的文档里面的确有文章尝试去抵制这一决定，所以我把他们说的三个理由列出来。&lt;/p&gt;
&lt;h3 id=&quot;“Best-practices-say-that-you-should-not-allow-these-hacks-anyway”&quot;&gt;&lt;a href=&quot;#“Best-practices-say-that-you-should-not-allow-these-hacks-anyway”&quot; class=&quot;headerlink&quot; title=&quot;“Best practices say that you should not allow these hacks anyway”&quot;&gt;&lt;/a&gt;“Best practices say that you should not allow these hacks anyway”&lt;/h3&gt;&lt;p&gt;关于对继承封闭的论据基本是围绕「Fragile Base Class Problem」展开，它认为如果允许在你的库的基础上继承出子类，他们可能改变代码运行的方式从而导致一些 bug。然而这只是一种可能性，会导致库运行异常从而导致 bug 的方式实在太多了。如果你重写一个类的功能，很明显你应该为破坏代码的运行负责。&lt;/p&gt;
&lt;p&gt;我之所以用「很明显」是因为重写一个库的功能是很明确的该有使用方自己负责。我已经辅导计算机科学学生很多年了，他们会范所有你能想象到的错误，但是他们从不会因为重载一个方法导致的破坏感到奇怪。实在有太多不经意的方式会导致对依赖库使用的破坏，例如你传递的参数类型是对的但单位却传错了，或者你忘了调用一个必须调用的方法。&lt;/p&gt;
&lt;p&gt;我欣赏那种减少代码被破坏可能性的编码方式，把类设置成不可变的的确能达到效果。但可以确定的是所有依赖库一定不是完整的或者是存在缺陷的，你又不可避免的要使用这些依赖库。为了修改一个封闭类，人们常常会使用一些 hack 的方法，这经常会仅仅是重写一两个类或者方法带来的 bug 更多。如果你不相信我说的话，这里有一个活生生的例子，如果你是一个 Android 开发者的话，你应该印象深刻：&lt;/p&gt;
&lt;p&gt;AppCompat 23.2.0 终于把 &lt;a href=&quot;https://plus.google.com/+AndroidDevelopers/posts/iTDmFiGrVne&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VectorDrawables&lt;/a&gt; 加到 support 包里了。由于可以帮助减少 APK 的体积和内存的占用，要不是它有一个 bug &lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=205236&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;会导致在 Activity 里面导致内存泄露&lt;/a&gt;&lt;br&gt;，本应该收到广泛欢迎。这个支持包在 &lt;a href=&quot;https://plus.google.com/+AndroidDevelopers/posts/iTDmFiGrVne&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;几周后被移除&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;内存泄露是怎么导致的呢？为了 &lt;a href=&quot;https://medium.com/@chrisbanes/appcompat-v23-2-age-of-the-vectors-91cbafa87c88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;提高 VectorDrawable 填充性能&lt;/a&gt;，这个支持包的作者们需要改进 &lt;code&gt;Context.getDrawable&lt;/code&gt; 的实现。但是这个方法是不可变的（final），所以他们不得不为每一个视图创建一份 &lt;code&gt;Resources wrapper&lt;/code&gt; 的拷贝来处理 &lt;em&gt;VectorDrawables&lt;/em&gt;。且不说这带来了大量的工作，这也导致大量的 &lt;code&gt;wrapped Resources&lt;/code&gt; 变得不同步和为了复制产生的大量内存开销。如果那个方法不是不可变的，他们就不会这样胡搞了。&lt;/p&gt;
&lt;h3 id=&quot;“People-successfully-use-other-languages-C-C-that-have-similar-approach”&quot;&gt;&lt;a href=&quot;#“People-successfully-use-other-languages-C-C-that-have-similar-approach”&quot; class=&quot;headerlink&quot; title=&quot;“People successfully use other languages (C++, C#) that have similar approach”&quot;&gt;&lt;/a&gt;“People successfully use other languages (C++, C#) that have similar approach”&lt;/h3&gt;&lt;p&gt;人们在 Python 这样的语言可以在任何时候做任何修改。Python 也有像 &lt;code&gt;_asdict&lt;/code&gt; 这样「非公有」不会在文档里描述的方法。它也有像 &lt;code&gt;__intern&lt;/code&gt; 这样的 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Visual_C%2B%2B%E5%90%8D%E5%AD%97%E4%BF%AE%E9%A5%B0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;name mangled&lt;/a&gt; 的函数，很难被发现。你可以自由的用 monkey-patch 或者重写任何一个你想重写的方法，Python 并不禁止这样做。&lt;/p&gt;
&lt;p&gt;在我五年全职开发 Python 的期间，我从没有想过谁会通过重写方法破坏我的代码。我能想象在大多数情况下，用正确安全的方法去改变一个私有方法比由于 Python 的禁止而不得不重新实现一个同样的功能更加节约时间。&lt;/p&gt;
&lt;p&gt;我并不是说要盲目地把每个类的实现都要改一遍，但是没有理由当我想这么做的时候却做不了。在 Python 社区里面有一句俗语 “We’re all consenting adults here”。你想对我的类做任何修改都可以。&lt;/p&gt;
&lt;h3 id=&quot;“If-people-really-want-to-hack-there-still-are-ways-you-can-always-write-your-hack-in-Java-and-call-it-from-Kotlin-see-Java-Interop-and-Aspect-frameworks-always-work-for-these-purposes”&quot;&gt;&lt;a href=&quot;#“If-people-really-want-to-hack-there-still-are-ways-you-can-always-write-your-hack-in-Java-and-call-it-from-Kotlin-see-Java-Interop-and-Aspect-frameworks-always-work-for-these-purposes”&quot; class=&quot;headerlink&quot; title=&quot;“If people really want to hack, there still are ways: you can always write your hack in Java and call it from Kotlin (see Java Interop), and Aspect frameworks always work for these purposes”&quot;&gt;&lt;/a&gt;“If people really want to hack, there still are ways: you can always write your hack in Java and call it from Kotlin (see Java Interop), and Aspect frameworks always work for these purposes”&lt;/h3&gt;&lt;p&gt;这真是一个荒诞的论点。即使是用 Java 如果你不用很难令人接受的反射的话，你依然不能重写封闭的 Kotlin 函数，所以这个论调无足轻重。&lt;/p&gt;
&lt;p&gt;不能对依赖库进行扩展意味着想要添加任何新的特性和修改 bug 都很难。现实中，大多数库都需要使用一些黑客的手段。这就是现实，而且不会改变。任何库的作者都不能预测所有用户可能碰到的场景。所有的类都是不可变的只能让库的使用者实现库本身没有的功能的时候变得更加困难。相对于 Kotlin 其他语言特性的便利性，这个设计实在是太令人费解了。&lt;/p&gt;
&lt;p&gt;如果你在编写一个 Kotlin 的依赖库，请把你所有的公开方法都设置成开放的。这会让你的用户更加方便。&lt;/p&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Kotlin 是一门非常棒的语言。它比 Java 简洁多了，它还有一个非常优秀的标准库，有了这个标准库你就可以将大量为了维持 Java 勉强可用下去的库都删掉了。多亏了代码自动转换功能，你可以很方便的把 Java 代码转换成 Koltin 代码，并且这个功能会越来越完善。如果你是一名 Android 开发者，你真应该去试一试。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://ohmerhe.com/2016/08/27/kotlin_good_bad_bugly/&quot;&gt;Kotlin：The Good, The Bad, and The Ugly(译)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;英文原文：&lt;a href=&quot;https://medium.com/keepsafe-engineering/kotlin-the-good-the-bad-and-the-ugly-bf5f09b87e6f#.s0t91g9xn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin: The Good, The Bad, and The Ugly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;欢迎大家投稿 &lt;a href=&quot;http://www.jianshu.com/collection/ce44081f781f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin Three&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[1]&lt;/strong&gt; In the case of a &lt;em&gt;lateinit &lt;/em&gt;property,&lt;em&gt;kotlin.UninitializedPropertyAccessException &lt;/em&gt;will be thrown, where the&lt;em&gt;Delegates.notNull &lt;/em&gt;will throw an &lt;em&gt;IllegalStateException&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[2]&lt;/strong&gt; There are some details about &lt;em&gt;lateinit &lt;/em&gt;that are worth noting, especially if you plan on accessing a &lt;em&gt;lateinit &lt;/em&gt;property from Java code. First is that &lt;em&gt;lateinit&lt;/em&gt;cannot be applied to primitive types such as &lt;em&gt;Int &lt;/em&gt;or &lt;em&gt;Double&lt;/em&gt;. The second is that a &lt;em&gt;lateinit &lt;/em&gt;property is backed by a field with the same visibility as the property, and this field is visible from Java. Additionally, that backing field can be freely set to null from Java. If any of those are issues for your use case, &lt;em&gt;Delegates.notNull &lt;/em&gt;may be a better choice.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[3]&lt;/strong&gt; The lazy &lt;em&gt;Sequence &lt;/em&gt;operators can outperform the eager versions by up to 20%, but only once list sizes start growing very large. For lists under a megabyte or so in size, the lazy versions often perform the same or worse than the eager versions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[4]&lt;/strong&gt; This is a bit of a simplification. Kotlin will only generate a backing field if you don’t define a get function, or if the defined get function doesn’t reference the implicit&lt;em&gt; field &lt;/em&gt;identifier.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;tags: Kotlin, Android&lt;/p&gt;
&lt;p&gt;在我的 &lt;a href=&quot;https://medium.com/keepsafe-engineering/lessons-from-converting-an-app-to-100-kotlin-68984a05dc
    
    </summary>
    
    
      <category term="Android" scheme="http://ohmerhe.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://ohmerhe.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 一个扩展函数，从此丢掉 ViewHolder</title>
    <link href="http://ohmerhe.com/2016/08/02/kotlin_one_method_no_viewholder/"/>
    <id>http://ohmerhe.com/2016/08/02/kotlin_one_method_no_viewholder/</id>
    <published>2016-08-02T15:57:49.000Z</published>
    <updated>2016-08-02T15:59:31.000Z</updated>
    
    <content type="html">&lt;p&gt;tags: Android, Kotlin&lt;/p&gt;
&lt;h2 id=&quot;ViewHolder&quot;&gt;&lt;a href=&quot;#ViewHolder&quot; class=&quot;headerlink&quot; title=&quot;ViewHolder&quot;&gt;&lt;/a&gt;ViewHolder&lt;/h2&gt;&lt;p&gt;作为一名 Android 开发者，对 ViewHolder 应该再熟悉不过了。ViewHolder 一开始并不是 Android 原生提供的（现在已经是 RecycleView 的默认实现了），而是 Google 为了提高 ListView 的使用性能，为开发者提供的一种最佳实践，具体可以参考 &lt;a href=&quot;https://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ViewHolder&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Google 提供的 ViewHolder 的标准实现如下，熟悉者可以直接跳到下个部分「ViewHolder变种」继续阅读。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewHolder&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  TextView text;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  TextView timestamp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ImageView icon;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ProgressBar progress;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Item 第一次创建视图的时候，填充 ViewHolder 并且将其保存在视图中。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ViewHolder holder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ViewHolder();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;holder.icon = (ImageView) convertView.findViewById(R.id.listitem_image);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;holder.text = (TextView) convertView.findViewById(R.id.listitem_text);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;holder.timestamp = (TextView) convertView.findViewById(R.id.listitem_timestamp);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;holder.progress = (ProgressBar) convertView.findViewById(R.id.progress_spinner);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;convertView.setTag(holder);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在填充 Item 数据的时候，直接使用 Viewholder 对象的属性，这样可以减少在滚动 ListView 频繁调用 &lt;code&gt;findViewById()&lt;/code&gt; 而导致的性能问题。&lt;/p&gt;
&lt;h2 id=&quot;ViewHolder变种&quot;&gt;&lt;a href=&quot;#ViewHolder变种&quot; class=&quot;headerlink&quot; title=&quot;ViewHolder变种&quot;&gt;&lt;/a&gt;ViewHolder变种&lt;/h2&gt;&lt;p&gt;Google 提供的 ViewHolder 的确能够提升 ListView 的使用效率，但是 ViewHolder 的实现相对繁琐，需要为每一种 Item 定义一个 ViewHolder，对代码书写和维护都是额外的开销。于是有人针对 ViewHolder 的实现做了一些优化，让 ViewHolder 写起来更方便。网上有很多种写法，我最认可的是下面的这种实现，简单优雅。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public class ViewHolder &amp;#123;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @SuppressWarnings(&amp;quot;unchecked&amp;quot;)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static &amp;lt;T extends View&amp;gt; T get(View view, int id) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        SparseArray&amp;lt;View&amp;gt; viewHolder = (SparseArray&amp;lt;View&amp;gt;) view.getTag();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (viewHolder == null) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            viewHolder = new SparseArray&amp;lt;View&amp;gt;();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            view.setTag(viewHolder);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        View childView = viewHolder.get(id);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (childView == null) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            childView = view.findViewById(id);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            viewHolder.put(id, childView);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return (T) childView;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里使用 &lt;code&gt;SparseArray&lt;/code&gt; 映射每个视图 &lt;code&gt;id&lt;/code&gt; 和对应的视图，并将其保存在视图中，这样既保证在滚动过程中频繁获取视图的效率，使用起来也极其方便。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ImageView bananaView = ViewHolder.get(convertView, R.id.banana);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TextView phoneView = ViewHolder.get(convertView, R.id.phone);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;BananaPhone bananaPhone = getItem(position);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;phoneView.setText(bananaPhone.getPhone());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Kotlin-扩展函数&quot;&gt;&lt;a href=&quot;#Kotlin-扩展函数&quot; class=&quot;headerlink&quot; title=&quot;Kotlin 扩展函数&quot;&gt;&lt;/a&gt;Kotlin 扩展函数&lt;/h2&gt;&lt;p&gt;这里Kotlin 实现 ViewHolder 的扩展函数和上面的变种使用的同一种思路，但得益于 Kotlin 语言提供的特性，实现和使用起来更加方便流畅，甚至都感觉不到 ViewHolder 这种特殊机制的存在。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;&amp;lt;T : View&amp;gt;&lt;/span&gt; View.&lt;span class=&quot;title&quot;&gt;findViewOften&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(viewId: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: T &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; viewHolder: SparseArray&amp;lt;View&amp;gt; = tag &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? SparseArray&amp;lt;View&amp;gt; ?: SparseArray()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    tag = viewHolder&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; childView: View? = viewHolder.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;(viewId)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; == childView) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        childView = findViewById(viewId)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        viewHolder.put(viewId, childView)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; childView &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; T&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里实现了一个 View 的扩展函数 &lt;code&gt;findViewOften(viewId: Int)&lt;/code&gt; 意味着在需要频繁寻找一个视图的子视图的情况下使用，这样我们在 Item 中就可以这样写了。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;val subTitle: TextView = convertView.findViewOften(R.id.list_item_subtitle)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;subTitle.text = itemData.subTitle&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于 Kotlin 提供类型推断功能，所以 &lt;code&gt;findViewOften&lt;/code&gt; 的返回值不用手动转换或者手动指定泛型类型。&lt;/p&gt;
&lt;p&gt;利用 Kotlin 的语言特性，为 View 扩展一个方法，从此再也不用繁琐的定义 Viewholder 了，使用的时候也是如此的顺畅，从此再也不必记得什么 ViewHolder 了。&lt;/p&gt;
&lt;p&gt;PS: 该方法在 &lt;a href=&quot;https://github.com/KotlinThree/AndroidExtension&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidExtension&lt;/a&gt; 已经提供封装，这个库里面还封装了一些其他方法，也蛮好用的，不过这个库还没有正式发布。&lt;/p&gt;
&lt;h2 id=&quot;RecycleView-的-ViewHolder&quot;&gt;&lt;a href=&quot;#RecycleView-的-ViewHolder&quot; class=&quot;headerlink&quot; title=&quot;RecycleView 的 ViewHolder&quot;&gt;&lt;/a&gt;RecycleView 的 ViewHolder&lt;/h2&gt;&lt;p&gt;最后，不得不提一下在 RecycleView 应该怎么办，因为在 RecycleView 的机制里面，在创建 Item 的 View 的时候，必须创建一个 RecyclerView.ViewHolder 并且返回。对于我们上面那么完美的封装， Google 这明显是在帮倒忙，还好这忙虽然帮倒了，不过还不至于无法挽回。&lt;/p&gt;
&lt;p&gt;如果大家在使用 RecycleView 还想使用本文提供的方法的话，可以参考我下面的方式实现。提供一个 RecyclerView.ViewHolder 默认实现类，该类提供一个通过 &lt;code&gt;id&lt;/code&gt; 获取视图的方法，在创建 Item 的 View 的时候默认都返回这个类的实例。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;class MyViewHolder(val convertView: View) : RecyclerView.ViewHolder(convertView) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	fun &amp;lt;T : View&amp;gt; findView(viewId: Int): T &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return convertView.findViewOften(viewId)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果不想 &lt;code&gt;MyViewHolder&lt;/code&gt; 的外部有不需要的依赖，可以将 &lt;code&gt;findViewOften&lt;/code&gt; 直接实现在 &lt;code&gt;MyViewHolder&lt;/code&gt; 里面。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ViewHolder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.programcreek.com/java-api-examples/android.util.SparseArray&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java Code Examples for android.util.SparseArray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/KotlinThree/AndroidExtension&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidExtension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;tags: Android, Kotlin&lt;/p&gt;
&lt;h2 id=&quot;ViewHolder&quot;&gt;&lt;a href=&quot;#ViewHolder&quot; class=&quot;headerlink&quot; title=&quot;ViewHolder&quot;&gt;&lt;/a&gt;ViewHolder&lt;/h2&gt;&lt;p&gt;作为一名 Andr
    
    </summary>
    
    
      <category term="Android" scheme="http://ohmerhe.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://ohmerhe.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>NullPointException 利器 Kotlin 可选型</title>
    <link href="http://ohmerhe.com/2016/07/14/kotlin-type-option/"/>
    <id>http://ohmerhe.com/2016/07/14/kotlin-type-option/</id>
    <published>2016-07-14T10:52:57.000Z</published>
    <updated>2016-07-14T11:09:05.000Z</updated>
    
    <content type="html">&lt;p&gt;tags: Kotlin&lt;/p&gt;
&lt;p&gt;NullPointException (简称 NPE ) 被称作 &lt;a href=&quot;https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Billion Dollar Mistake&lt;/a&gt; 一直困扰着Java 和 Android 开发者。Kotlin 的类型系统中提供可选类型用于减少 NPE 问题带来的风险。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;虽然，Kotlin 提供了可选类型用于减少 NPE 问题的风险，但是并没有办法完全消除 NPE 带来的隐患，本问将探讨如何巧妙地使用「可选型」更好的规避 NPE 的发生。&lt;/p&gt;
&lt;h2 id=&quot;可选型定义&quot;&gt;&lt;a href=&quot;#可选型定义&quot; class=&quot;headerlink&quot; title=&quot;可选型定义&quot;&gt;&lt;/a&gt;可选型定义&lt;/h2&gt;&lt;h3 id=&quot;非空类型&quot;&gt;&lt;a href=&quot;#非空类型&quot; class=&quot;headerlink&quot; title=&quot;非空类型&quot;&gt;&lt;/a&gt;非空类型&lt;/h3&gt;&lt;p&gt;我们先从可选型的定义开始，当我们在 Kotlin 中定义一个变量时，默认就是非空类型的，当你将一个非空类型置空的时候，编译器会告诉你这不可行。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a: String = &lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;a = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// compilation error&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因此，如果你后面任何时候使用该变量时，都可以放心的使用而不用担心会发生 NPE。所以要想远离 NPE，首先需要&lt;strong&gt;「尽可能的使用非空类型的定义」&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;可选型（可空类型）&quot;&gt;&lt;a href=&quot;#可选型（可空类型）&quot; class=&quot;headerlink&quot; title=&quot;可选型（可空类型）&quot;&gt;&lt;/a&gt;可选型（可空类型）&lt;/h3&gt;&lt;p&gt;虽然「非空类型」能够有效避免 NPE 的问题，但是有时候我们总不可避免的需要使用「可选类型」。在定义可选型的时候，我们只要在非空类型的后面添加一个 &lt;code&gt;?&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b: String? = &lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// ok&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在使用可选型变量的时候，这个变量就有可能为空，所以在使用前我们应该对其进行空判断（在 Java 中我们经常这样做），这样往往带来带来大量的工作，这些空判断代码本身没有什么实际意义，并且让代码的可读性和简洁性带来了巨大的挑战。在网上可以看到许多人针对如何减少 NPE 提出了自己的建议，有的的确很不错，但成本依然很大。除此之外，还有一个最可恶的场景「我们会忘记」。&lt;/p&gt;
&lt;p&gt;Kotlin 为了解决这个问题，它并不允许我们直接使用一个可选型的变量去调用方法或者属性。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; l = b.length &lt;span class=&quot;comment&quot;&gt;// compilation error&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以和 Java 中一样，在使用变量之前先进行空判断，然后再去调用。如果使用这种方法，那么空判断是必须的。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; l = &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (b != &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) b.length &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意： 如果你定义的变量是全局变量，即使你做了空判断，依然不能使用变量去调用方法或者属性。&lt;/strong&gt;这个时候你需要考虑使用下面的介绍的方法。&lt;/p&gt;
&lt;p&gt;Kotlin 为可选型提供了一个安全调用操作符 &lt;code&gt;?.&lt;/code&gt;，使用该操作符可以方便调用可选型的方法或者属性。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; l = b?.length&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里 &lt;code&gt;l&lt;/code&gt; 得到的返回依然是一个可选型 &lt;code&gt;Int?&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Kotlin 还提供了一个强转的操作符 &lt;code&gt;!!&lt;/code&gt;，这个操作符能够强行调用变量的方法或者属性，而不管这个变量是否为空，如果这个时候该变量为空时，那么就会发生 NPE。所以如果不想继续陷入 NPE 的困境无法自拔，请不要该操作符走的太近。&lt;/p&gt;
&lt;h2 id=&quot;Elvis-操作符&quot;&gt;&lt;a href=&quot;#Elvis-操作符&quot; class=&quot;headerlink&quot; title=&quot;Elvis 操作符&quot;&gt;&lt;/a&gt;&lt;code&gt;Elvis&lt;/code&gt; 操作符&lt;/h2&gt;&lt;p&gt;上面有提到一种情况，当 &lt;code&gt;b&lt;/code&gt; 为空时，返回它的长度值给一个默认值 -1。要实现这样的逻辑当然可以用 &lt;code&gt;ifelse&lt;/code&gt; 的逻辑判断实现，但 Kotlin 提供了一个更优雅的书写方式 &lt;code&gt;?:&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; l = b?.length ?: &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;b?.length ?: -1&lt;/code&gt; 和 &lt;code&gt;if (b != null) b.length else -1&lt;/code&gt; 完全等价的。&lt;/p&gt;
&lt;p&gt;其实你还可以在 &lt;code&gt;?:&lt;/code&gt; 后面添加任何表达式，比如你可以在后面会用 &lt;code&gt;return&lt;/code&gt; 和 &lt;code&gt;throw&lt;/code&gt;（在 Kotlin 中它们都是表达式）。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(node: &lt;span class=&quot;type&quot;&gt;Node&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: String? &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; parent = node.getParent() ?: &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; name = node.getName() ?: &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;string&quot;&gt;&quot;name expected&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;let-函数&quot;&gt;&lt;a href=&quot;#let-函数&quot; class=&quot;headerlink&quot; title=&quot;let 函数&quot;&gt;&lt;/a&gt;&lt;code&gt;let&lt;/code&gt; 函数&lt;/h2&gt;&lt;p&gt;&lt;code&gt;let&lt;/code&gt; 是官方 &lt;code&gt;stdlib&lt;/code&gt; 提供的标准函数库里面的函数，这个函数巧妙的利用的 Kotlin 语言的特性让 &lt;code&gt;let&lt;/code&gt; 接受的表达式参数中的调用方是非空的。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; listWithNulls: List&amp;lt;String?&amp;gt; = listOf(&lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; listWithNulls) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    item?.let &amp;#123; println(it) &amp;#125; &lt;span class=&quot;comment&quot;&gt;// prints A and ignores null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码的只会输出 &lt;code&gt;A&lt;/code&gt;，而不会输出 &lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要注意的是，这个方法调用的时候必须要使用 &lt;code&gt;?.&lt;/code&gt; 操作符调用才能生效哦。&lt;/strong&gt;如果你的部分代码依赖于一个可选型变量为非空的时候，就可以使用 &lt;code&gt;let&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;参考这个函数的实现，下面我尝试提供几个自己定义的方法。&lt;/p&gt;
&lt;h2 id=&quot;自定义处理&quot;&gt;&lt;a href=&quot;#自定义处理&quot; class=&quot;headerlink&quot; title=&quot;自定义处理&quot;&gt;&lt;/a&gt;自定义处理&lt;/h2&gt;&lt;p&gt;这里定义的两个方法是参考 &lt;code&gt;Swift&lt;/code&gt; 里面的 &lt;code&gt;if let&lt;/code&gt; 和 &lt;code&gt;guard&lt;/code&gt; 进行的抽象。&lt;/p&gt;
&lt;h3 id=&quot;orElse-函数&quot;&gt;&lt;a href=&quot;#orElse-函数&quot; class=&quot;headerlink&quot; title=&quot;orElse 函数&quot;&gt;&lt;/a&gt;&lt;code&gt;orElse&lt;/code&gt; 函数&lt;/h3&gt;&lt;p&gt;&lt;code&gt;orElse&lt;/code&gt; 是和 &lt;code&gt;Elvis&lt;/code&gt; 函数结合使用的，默认 &lt;code&gt;Elvis&lt;/code&gt; 后面只能直接或者执行一个表达式获取返回值或者直接通过 &lt;code&gt;return&lt;/code&gt; 或者 &lt;code&gt;throw&lt;/code&gt; 结束当前函数的执行。结合 &lt;code&gt;orElse&lt;/code&gt; 函数，你能够更加灵活的处理前面的 &lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以处理一些逻辑以后，再返回一个可用的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a:String? = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = a ?: orElse &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 做任何事&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;@orElse&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;s&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;也可以处理一些逻辑后， 通过&lt;code&gt;return&lt;/code&gt; 或者 &lt;code&gt;throw&lt;/code&gt; 结束当前函数的执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a:String? = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = a ?: orElse &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 做任何事&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;guard-函数&quot;&gt;&lt;a href=&quot;#guard-函数&quot; class=&quot;headerlink&quot; title=&quot;guard 函数&quot;&gt;&lt;/a&gt;&lt;code&gt;guard&lt;/code&gt; 函数&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Elvis&lt;/code&gt; 默认只能对单个变量或表达式是否为空进行处理，当碰到多个变量需要一起判断时，就会束手无策，&lt;code&gt;guard&lt;/code&gt; 就是为了解决这个问题。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fun testGuard(a: String?, b: String?, c: String?)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	guard(a, b, c) ?: orElse &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(&quot;a or b or c is null &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 现在 `a`，`b`，`c` 都是不为空&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于没有编译器的支持，所以暂时还不能实现 &lt;a href=&quot;https://kotlinlang.org/docs/reference/null-safety.html#checking-for-null-keyword--in-conditions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;空屏蔽&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里定义的两个函数的实现，你可以自己尝试去实现一下，就当是个练习（鬼笑）。&lt;a href=&quot;https://github.com/KotlinThree/AndroidExtension&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidExtension&lt;/a&gt;有具体的实现代码。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;经过一系列分析以后，我们已经对怎么使用好 Kotlin 可选型有一定的了解，如果不想 NPE 问题不断困扰，可以参考这里总结的几条。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽可能的使用非空类型的定义&lt;/li&gt;
&lt;li&gt;远离 &lt;code&gt;!!&lt;/code&gt;，如果非要用，请调用代码在前面「三行之内」进行非空判断&lt;/li&gt;
&lt;li&gt;熟练使用 &lt;code&gt;Elvis&lt;/code&gt; 操作符&lt;/li&gt;
&lt;li&gt;自定义一些常用的函数，让自己的代码更流畅&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/null-safety.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;null-safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;trailing-closures-in-guard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;tags: Kotlin&lt;/p&gt;
&lt;p&gt;NullPointException (简称 NPE ) 被称作 &lt;a href=&quot;https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions&quot;&gt;The Billion Dollar Mistake&lt;/a&gt; 一直困扰着Java 和 Android 开发者。Kotlin 的类型系统中提供可选类型用于减少 NPE 问题带来的风险。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kotlin" scheme="http://ohmerhe.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 函数式编程三板斧</title>
    <link href="http://ohmerhe.com/2016/07/05/kotlin_function_three_common_methods/"/>
    <id>http://ohmerhe.com/2016/07/05/kotlin_function_three_common_methods/</id>
    <published>2016-07-05T14:06:41.000Z</published>
    <updated>2016-08-01T03:54:36.000Z</updated>
    
    <content type="html">&lt;p&gt;tags: kotlin, 函数式编程, map, filter, reduce&lt;/p&gt;
&lt;p&gt;每个函数式语言都提供及几大类基本函数，这些函数在功能上一般都极为相似，但是在名称和调用方法上可能有一些细微的差别。今天就讲讲 &lt;code&gt;Kotlin&lt;/code&gt; 中提供的函数式编程三板斧&lt;code&gt;filter&lt;/code&gt;、&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;reduce&lt;/code&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Filter&quot;&gt;&lt;a href=&quot;#Filter&quot; class=&quot;headerlink&quot; title=&quot;Filter&quot;&gt;&lt;/a&gt;Filter&lt;/h2&gt;&lt;p&gt;筛选函数将用户给定的布尔逻辑作用于集合，返回由原集合中符合条件的元素组合的一个子集。假设一个逻辑，将数组中是3的倍数的数筛选出来，和 &lt;code&gt;Java&lt;/code&gt; 做一个简单的对比。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Java 代码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] all = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;Integer&amp;gt; filters = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a : all) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (a % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        filters.add(a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Kotlin 代码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; all = arrayOf(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; filters = all.filter &amp;#123; it % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Kotlin 还提供一系列类似的过滤函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filterIndexed&lt;/code&gt;, 同 &lt;code&gt;filter&lt;/code&gt;，不过在逻辑判断的方法块中可以拿到当前item的index&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filterNot&lt;/code&gt;，与&lt;code&gt;filter&lt;/code&gt;相反，只返回不符合条件的元素组合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对 &lt;code&gt;Map&lt;/code&gt; 类型数据集合，提供了 &lt;code&gt;filterKeys&lt;/code&gt; 和 &lt;code&gt;filterValues&lt;/code&gt; 方法，方便只做 key 或者 value 的判断。&lt;/p&gt;
&lt;h2 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h2&gt;&lt;p&gt;映射函数也是一个高阶函数，将一个集合经过一个传入的变换函数映射成另外一种集合。&lt;/p&gt;
&lt;p&gt;假设我们现在需要将一系列的名字的长度保存到另一个数组。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Java 代码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String[] names = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;James&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Tom&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Jack&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Kobe&quot;&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] namesLength = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[names.length];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; names.length ; i ++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    namesLength[i] = names[i].length();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Kotlin 代码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; names = arrayOf(&lt;span class=&quot;string&quot;&gt;&quot;James&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Tom&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Jack&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Kobe&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; namesLength = names.map &amp;#123; it.length &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;映射函数是将一个集合映射成另外一种集合，所以当你需要见一个 HaspMap 映射成一个 List 的时候，会非常方便。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; params = mapOf(&lt;span class=&quot;string&quot;&gt;&quot;limit&quot;&lt;/span&gt; to &lt;span class=&quot;string&quot;&gt;&quot;10&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;offset&quot;&lt;/span&gt; to &lt;span class=&quot;string&quot;&gt;&quot;20&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;order&quot;&lt;/span&gt; to &lt;span class=&quot;string&quot;&gt;&quot;asc&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; s = params.map &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;it.key&amp;#125;&lt;/span&gt;=&lt;span class=&quot;subst&quot;&gt;$&amp;#123;it.value&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt; &amp;#125;.joinToString(&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// s = limit=10&amp;amp;offset=20&amp;amp;order=asc&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同 &lt;code&gt;filter&lt;/code&gt; 相似，Kotlin 也提供的 &lt;code&gt;mapIndexed&lt;/code&gt; 的类似方法方便使用，针对 &lt;code&gt;Map&lt;/code&gt; 类型的集合也有 &lt;code&gt;mapKeys&lt;/code&gt; 和 &lt;code&gt;mapValues&lt;/code&gt; 的封装。&lt;/p&gt;
&lt;h2 id=&quot;Reduce&quot;&gt;&lt;a href=&quot;#Reduce&quot; class=&quot;headerlink&quot; title=&quot;Reduce&quot;&gt;&lt;/a&gt;Reduce&lt;/h2&gt;&lt;p&gt;归纳函数将一个数据集合的所有元素通过传入的操作函数实现数据集合的积累叠加效果。&lt;/p&gt;
&lt;p&gt;假设我们需要将一首藏头诗的每句诗的第一句拿出来拼成一句话。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Java 代码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String[] texts = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;芦花丛中一扁舟&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;俊杰俄从此地游&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;义士若能知此理&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;反躬难逃可无忧&quot;&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;StringBuffer sb = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuffer();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; texts.length ; i ++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sb.append(texts[i].substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String result = sb.toString();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Kotlin 代码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; texts = arrayOf(&lt;span class=&quot;string&quot;&gt;&quot;芦花丛中一扁舟&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;俊杰俄从此地游&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;义士若能知此理&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;反躬难逃可无忧&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; result = texts.map &amp;#123; it.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#125;.reduce &amp;#123; r, s -&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;subst&quot;&gt;$s&lt;/span&gt;&quot;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后得到的结果是「卢俊义反」。&lt;/p&gt;
&lt;h2 id=&quot;函数式编程&quot;&gt;&lt;a href=&quot;#函数式编程&quot; class=&quot;headerlink&quot; title=&quot;函数式编程&quot;&gt;&lt;/a&gt;函数式编程&lt;/h2&gt;&lt;p&gt;函数式编程的精髓在于函数本身。在函数式编程中函数是第一等公民，与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。&lt;/p&gt;
&lt;p&gt;函数式编程好的实践在于对运算过程的高度抽象和没有”副作用”（既保持函数的独立性），函数式编程三板斧是函数式编程的典型范式，在编程中被大量使用，即使人们不关注函数式编程，在使用函数式编程语言的时候，也会不自觉的使用这些函数。&lt;/p&gt;
&lt;p&gt;函数式编程是一种思维方式，函数式编程鼓励放弃对状态的维持（是命令式编程的基础），将所有的操作都交给运行时去执行。当然为了保证程序运行的效率，这需要提供一些辅助性的手段（缓存、缓求值等）。&lt;/p&gt;
&lt;p&gt;[参考资料]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/26587213/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;函数式编程思维&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/view/1711147.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;函数式编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kotlin doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kotlin api doc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;tags: kotlin, 函数式编程, map, filter, reduce&lt;/p&gt;
&lt;p&gt;每个函数式语言都提供及几大类基本函数，这些函数在功能上一般都极为相似，但是在名称和调用方法上可能有一些细微的差别。今天就讲讲 &lt;code&gt;Kotlin&lt;/code&gt; 中提供的函数式编程三板斧&lt;code&gt;filter&lt;/code&gt;、&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;reduce&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kotlin" scheme="http://ohmerhe.com/tags/Kotlin/"/>
    
      <category term="函数式编程" scheme="http://ohmerhe.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>LoopBack 操作记录</title>
    <link href="http://ohmerhe.com/2016/06/26/loopback_useage_record/"/>
    <id>http://ohmerhe.com/2016/06/26/loopback_useage_record/</id>
    <published>2016-06-26T11:02:04.000Z</published>
    <updated>2016-07-09T10:57:08.000Z</updated>
    
    <content type="html">&lt;p&gt;tags: LoopBack, MySQL&lt;/p&gt;
&lt;h2 id=&quot;什么是LoopBack&quot;&gt;&lt;a href=&quot;#什么是LoopBack&quot; class=&quot;headerlink&quot; title=&quot;什么是LoopBack&quot;&gt;&lt;/a&gt;什么是LoopBack&lt;/h2&gt;&lt;p&gt;请看&lt;a href=&quot;https://loopback.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Get-Started&quot;&gt;&lt;a href=&quot;#Get-Started&quot; class=&quot;headerlink&quot; title=&quot;Get Started&quot;&gt;&lt;/a&gt;Get Started&lt;/h2&gt;&lt;p&gt;继续查看&lt;a href=&quot;http://loopback.io/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting started&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;自定义MySql连接&quot;&gt;&lt;a href=&quot;#自定义MySql连接&quot; class=&quot;headerlink&quot; title=&quot;自定义MySql连接&quot;&gt;&lt;/a&gt;自定义MySql连接&lt;/h2&gt;&lt;h3 id=&quot;自定义table名字&quot;&gt;&lt;a href=&quot;#自定义table名字&quot; class=&quot;headerlink&quot; title=&quot;自定义table名字&quot;&gt;&lt;/a&gt;自定义table名字&lt;/h3&gt;&lt;p&gt;在模型的json文件中&lt;code&gt;common/model/category.json&lt;/code&gt;添加Mysql的配置&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &quot;name&quot;: &quot;Category&quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &quot;mysql&quot;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;table&quot;: &quot;custom_category&quot; // 自定义的表名&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多Model的Json定义参考&lt;a href=&quot;https://docs.strongloop.com/display/public/LB/Model+definition+JSON+file&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Model definition JSON file&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;自定义table列名&quot;&gt;&lt;a href=&quot;#自定义table列名&quot; class=&quot;headerlink&quot; title=&quot;自定义table列名&quot;&gt;&lt;/a&gt;自定义table列名&lt;/h3&gt;&lt;p&gt;同样在模型定义的json文件中，&lt;code&gt;common/model/category.json&lt;/code&gt;找到&lt;code&gt;properties&lt;/code&gt;模块的配置，为需要自定义表列名的属性下添加&lt;code&gt;msql&lt;/code&gt;配置信息&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &quot;name&quot;: &quot;category&quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &quot;properties&quot;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;title&quot;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &quot;type&quot;: &quot;String&quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &quot;required&quot;: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &quot;mysql&quot;:&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &quot;columnName&quot;:&quot;question_content&quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &quot;dataType&quot;:&quot;VARCHAR&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有其他类型类型的对应关系，可以看&lt;a href=&quot;https://docs.strongloop.com/display/public/LB/MySQL+connector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MySQL connector&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;自定义请求方法-Remote-Method&quot;&gt;&lt;a href=&quot;#自定义请求方法-Remote-Method&quot; class=&quot;headerlink&quot; title=&quot;自定义请求方法(Remote Method)&quot;&gt;&lt;/a&gt;自定义请求方法(Remote Method)&lt;/h2&gt;&lt;p&gt;loopback默认提供了许多方法，可以方便的访问到服务端的资源，这里列出一些常用的，更多的方法可以参考&lt;a href=&quot;http://apidocs.strongloop.com/loopback/#persistedmodel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;method&lt;/th&gt;
&lt;th&gt;path&lt;/th&gt;
&lt;th&gt;verb&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;find&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;findById&lt;/td&gt;
&lt;td&gt;/:id&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;findOne&lt;/td&gt;
&lt;td&gt;/findOne&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deleteById&lt;/td&gt;
&lt;td&gt;/:id&lt;/td&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;count&lt;/td&gt;
&lt;td&gt;/count&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exists&lt;/td&gt;
&lt;td&gt;/:id/exists&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exists&lt;/td&gt;
&lt;td&gt;/:id&lt;/td&gt;
&lt;td&gt;HEAD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;create&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;upsert&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exists&lt;/td&gt;
&lt;td&gt;/exists&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exists&lt;/td&gt;
&lt;td&gt;/exists&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这些方法的定义和注册都可以在&lt;code&gt;/node_modules/loopback/lib/persisted-model.js&lt;/code&gt;文件中看到。如&lt;code&gt;find&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;PersistedModel.find = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;filter, cb&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  throwNotAttached(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.modelName, &lt;span class=&quot;string&quot;&gt;&#39;find&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setRemoting(PersistedModel, &lt;span class=&quot;string&quot;&gt;&#39;find&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  description: &lt;span class=&quot;string&quot;&gt;&#39;Find all instances of the model matched by filter from the data source.&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  accessType: &lt;span class=&quot;string&quot;&gt;&#39;READ&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  accepts: &amp;#123;arg: &lt;span class=&quot;string&quot;&gt;&#39;filter&#39;&lt;/span&gt;, type: &lt;span class=&quot;string&quot;&gt;&#39;object&#39;&lt;/span&gt;, description: &lt;span class=&quot;string&quot;&gt;&#39;Filter defining fields, where, include, order, offset, and limit&#39;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  returns: &amp;#123;arg: &lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, type: [typeName], root: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  http: &amp;#123;verb: &lt;span class=&quot;string&quot;&gt;&#39;get&#39;&lt;/span&gt;, path: &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参照上面的方法我们可以自定义一些需要的方法&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Person&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Person.greet = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;msg, cb&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      cb(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Greetings... &#39;&lt;/span&gt; + msg);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Person.remoteMethod(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;greet&#39;&lt;/span&gt;, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          accepts: &amp;#123;arg: &lt;span class=&quot;string&quot;&gt;&#39;msg&#39;&lt;/span&gt;, type: &lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          http: &amp;#123;verb: &lt;span class=&quot;string&quot;&gt;&#39;get&#39;&lt;/span&gt;, path: &lt;span class=&quot;string&quot;&gt;&#39;/greet&#39;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          returns: &amp;#123;arg: &lt;span class=&quot;string&quot;&gt;&#39;greeting&#39;&lt;/span&gt;, type: &lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以通过&lt;code&gt;GET /api/persons/greet?msg=John&lt;/code&gt;获得如下的返回&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Greetings... John&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于自定义方法的参数说明可以参考&lt;a href=&quot;https://docs.strongloop.com/display/public/LB/Remote+methods&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;详细描述&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;自定义返回数据&quot;&gt;&lt;a href=&quot;#自定义返回数据&quot; class=&quot;headerlink&quot; title=&quot;自定义返回数据&quot;&gt;&lt;/a&gt;自定义返回数据&lt;/h2&gt;&lt;p&gt;loopback提供了一系列方法可以改变资源返回，比如我需要将请求到的资源列表包装在一个对象的&lt;code&gt;list&lt;/code&gt;下返回。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Category.afterRemote(&lt;span class=&quot;string&quot;&gt;&#39;find&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ctx, remoteMethodOutput, next&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ctx.result &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray(remoteMethodOutput)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      ctx.result = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;list&quot;&lt;/span&gt;: remoteMethodOutput&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    next();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;自定义返回结果前&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#123;...&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#123;...&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#123;...&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#123;...&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;自定义返回结果后&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&quot;list&quot; : [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#123;...&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#123;...&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#123;...&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#123;...&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多关于请求资源的逻辑控制，请参考&lt;a href=&quot;https://docs.strongloop.com/display/public/LB/Adding+logic+to+models&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adding logic to models&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;tags: LoopBack, MySQL&lt;/p&gt;
&lt;h2 id=&quot;什么是LoopBack&quot;&gt;&lt;a href=&quot;#什么是LoopBack&quot; class=&quot;headerlink&quot; title=&quot;什么是LoopBack&quot;&gt;&lt;/a&gt;什么是LoopBack&lt;/h2&gt;&lt;p&gt;请看&lt;a href=&quot;https://loopback.io/&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://ohmerhe.com/tags/MySQL/"/>
    
      <category term="LoopBack" scheme="http://ohmerhe.com/tags/LoopBack/"/>
    
  </entry>
  
  <entry>
    <title>树莓派安装 Node</title>
    <link href="http://ohmerhe.com/2016/06/26/raspberry_install_node/"/>
    <id>http://ohmerhe.com/2016/06/26/raspberry_install_node/</id>
    <published>2016-06-26T08:23:04.000Z</published>
    <updated>2016-07-09T14:26:58.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;安装Node&quot;&gt;&lt;a href=&quot;#安装Node&quot; class=&quot;headerlink&quot; title=&quot;安装Node&quot;&gt;&lt;/a&gt;安装Node&lt;/h2&gt;&lt;h3 id=&quot;快速安装&quot;&gt;&lt;a href=&quot;#快速安装&quot; class=&quot;headerlink&quot; title=&quot;快速安装&quot;&gt;&lt;/a&gt;快速安装&lt;/h3&gt;&lt;p&gt;国外有个哥们为树莓派的Node.js制作了一个安装包，可以非常方便的安装，但是有一个缺点是版本不是最新。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget http://node-arm.herokuapp.com/node_latest_armhf.deb &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo dpkg -i node_latest_armhf.deb&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;官方渠道安装&quot;&gt;&lt;a href=&quot;#官方渠道安装&quot; class=&quot;headerlink&quot; title=&quot;官方渠道安装&quot;&gt;&lt;/a&gt;官方渠道安装&lt;/h3&gt;&lt;p&gt;官方有两个版本可以选择，LTS版和Current版，选择官方推荐LTS版。然后该选择那个平台的包呢。&lt;/p&gt;
&lt;p&gt;运行查看本机的CPU信息&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cat /proc/cpuinfo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以得到类似下面的输出&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;processor	: 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;model name	: ARMv7 Processor rev 5 (v7l)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;BogoMIPS	: 38.40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Features	: half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CPU implementer	: 0x41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CPU architecture: 7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CPU variant	: 0x0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CPU part	: 0xc07&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CPU revision	: 5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;processor	: 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;model name	: ARMv7 Processor rev 5 (v7l)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;BogoMIPS	: 38.40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Features	: half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CPU implementer	: 0x41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CPU architecture: 7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CPU variant	: 0x0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CPU part	: 0xc07&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CPU revision	: 5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据输出可以确定我们该选择&lt;code&gt;armv7&lt;/code&gt;的包。下载相应的包(当前LTS版最新为4.4.5)&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget https://nodejs.org/dist/v4.4.5/node-v4.4.5-linux-armv7l.tar.gz&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下载完成后直接将包解压到对应的目录，并且重命名&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo tar -xzf node-v4.4.5-linux-armv7l.tar.gz -C /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mv /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/node-v4.4.5-linux-armv7l /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/node&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS： 如果你下载的是老版本的话，可能需要自行编译&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;./configure&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo make install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;添加到系统路径中&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo vim ~/.bashrc&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在最后一行加上&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;PATH=&lt;span class=&quot;variable&quot;&gt;$PATH&lt;/span&gt;:/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/node/bin&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;保存以后运行&lt;code&gt;source ~/.bashrc&lt;/code&gt;更新命令行&lt;/p&gt;
&lt;h3 id=&quot;检测安装&quot;&gt;&lt;a href=&quot;#检测安装&quot; class=&quot;headerlink&quot; title=&quot;检测安装&quot;&gt;&lt;/a&gt;检测安装&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pi@raspberrypi:~ $ node -v&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;v4.4.5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pi@raspberrypi:~ $ npm -v&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.15.5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装cnpm&quot;&gt;&lt;a href=&quot;#安装cnpm&quot; class=&quot;headerlink&quot; title=&quot;安装cnpm&quot;&gt;&lt;/a&gt;安装cnpm&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install cnpm -g --registry=https://registry.npm.taobao.org&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装LoopBack&quot;&gt;&lt;a href=&quot;#安装LoopBack&quot; class=&quot;headerlink&quot; title=&quot;安装LoopBack&quot;&gt;&lt;/a&gt;安装LoopBack&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cnpm install -g strongloop&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装失败，原因不明，试试&lt;code&gt;npm&lt;/code&gt;，安装成功。（对于cnpm和npm的差别不是很了解，不过自己平时在安装的时候可以先用&lt;code&gt;cnpm&lt;/code&gt;安装，不行的话再尝试&lt;code&gt;npm&lt;/code&gt;）&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install -g strongloop&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装以后，就可以根据官方提供的&lt;a href=&quot;http://loopback.io/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;创建Hello World&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://node-arm.herokuapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://node-arm.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://joshondesign.com/2013/10/23/noderpi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Install Node on the Raspberry Pi in 5 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nodejs.org/en/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://npm.taobao.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淘宝 NPM 镜像&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Node&quot;&gt;&lt;a href=&quot;#安装Node&quot; class=&quot;headerlink&quot; title=&quot;安装Node&quot;&gt;&lt;/a&gt;安装Node&lt;/h2&gt;&lt;h3 id=&quot;快速安装&quot;&gt;&lt;a href=&quot;#快速安装&quot; class=&quot;headerlink&quot; title=&quot;快速安装&quot;&gt;&lt;/a&gt;快速安装&lt;/h3&gt;&lt;p&gt;国外有个哥们为树莓派的Node.js制作了一个安装包，可以非常方便的安装，但是有一个缺点是版本不是最新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="树莓派" scheme="http://ohmerhe.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Node.js" scheme="http://ohmerhe.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>用 U 盘为树莓派备份镜像</title>
    <link href="http://ohmerhe.com/2016/06/25/raspberry_backup_system_img/"/>
    <id>http://ohmerhe.com/2016/06/25/raspberry_backup_system_img/</id>
    <published>2016-06-25T13:02:22.000Z</published>
    <updated>2016-07-09T14:25:52.000Z</updated>
    
    <content type="html">&lt;p&gt;树莓派使用了一段时间以后，已经为树莓派装了好多东西，也做了好多配置。有必要为系统做一次备份，就不用每次都重头开始了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;准备工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空白U盘（最好是8G以上，也可以是sd卡+读卡器）&lt;/li&gt;
&lt;li&gt;可以上网的树莓派&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;下载脚本&quot;&gt;&lt;a href=&quot;#下载脚本&quot; class=&quot;headerlink&quot; title=&quot;下载脚本&quot;&gt;&lt;/a&gt;下载脚本&lt;/h2&gt;&lt;p&gt;进入树莓派系统，下载脚本文件：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget https://raw.githubusercontent.com/billw2/rpi-clone/master/rpi-clone&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为脚本设置执行权限：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo chmod +x rpi-clone&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;U盘准备&quot;&gt;&lt;a href=&quot;#U盘准备&quot; class=&quot;headerlink&quot; title=&quot;U盘准备&quot;&gt;&lt;/a&gt;U盘准备&lt;/h2&gt;&lt;p&gt;在插入u盘前，先运行&lt;code&gt;sudo fdisk -l&lt;/code&gt;查看树莓派的磁盘。SD卡插槽上正在运行系统的SD卡应该显示为/dev/mmcblk0。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Device         Boot  Start      End  Sectors  Size Id Type&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/mmcblk0p1        8192   137215   129024   63M  c W95 FAT32 (LBA)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/mmcblk0p2      137216 31116287 30979072 14.8G 83 Linux&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;插入U盘，再运行上面的命令，可以看到增加了下面的内容。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Device     Boot Start      End  Sectors  Size Id Type&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/dev/sda1  *       64 15771647 15771584  7.5G  b W95 FAT32&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;/dev/sda1（或者是/dev/sdb1）就是我们插入的空白U盘。&lt;/p&gt;
&lt;h2 id=&quot;备份镜像&quot;&gt;&lt;a href=&quot;#备份镜像&quot; class=&quot;headerlink&quot; title=&quot;备份镜像&quot;&gt;&lt;/a&gt;备份镜像&lt;/h2&gt;&lt;p&gt;运行命令&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo ./rpi-clone sda &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里，第一个参数是SD卡的名字，这里是&lt;code&gt;sda&lt;/code&gt;。&lt;code&gt;-f&lt;/code&gt;告诉脚本完整格式化SD卡。&lt;/p&gt;
&lt;p&gt;脚本会提示你是否初始化目标SD卡。输入&lt;code&gt;yes&lt;/code&gt;然后按一下回车。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpox6.com1.z0.glb.clouddn.com/image/raspberry_backup_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;接着，会提示你是否想给你的备份镜像指定一个标签，你可以设置一个标签，或者直接回车跳过。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpox6.com1.z0.glb.clouddn.com/image/raspberry_backup_2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后，会有一次最终确认，输入&lt;code&gt;yes&lt;/code&gt;回车，等待一段时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpox6.com1.z0.glb.clouddn.com/image/raspberry_backup_3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;备份完成后，会提示你是否卸载(unmount)这个新系统卡，输入&lt;code&gt;yes&lt;/code&gt;回车完成备份。&lt;/p&gt;
&lt;p&gt;到这里整个备份已经完成&lt;/p&gt;
&lt;h2 id=&quot;镜像还原&quot;&gt;&lt;a href=&quot;#镜像还原&quot; class=&quot;headerlink&quot; title=&quot;镜像还原&quot;&gt;&lt;/a&gt;镜像还原&lt;/h2&gt;&lt;p&gt;树莓派本身不支持从U盘启动，所以经过上面的步骤备份好的系统要还原使用，还需要进一步处理。&lt;/p&gt;
&lt;p&gt;一种方式是让你的树莓派支持从U盘启动，具体可以参考&lt;a href=&quot;http://www.geekfan.net/5244/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;树莓派支持多系统启动&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另外就是先将系统还原到sd卡中使用。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://shumeipai.nxez.com/2014/06/01/do-system-backup-image-of-raspberry-pi-for-linux-or-mac.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为树莓派做系统备份镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.lxx1.com/1450&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;制作树苺派SD卡备份镜像——树苺派系统备份与还原指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.geekfan.net/5244/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何使用BerryBoot来使树莓派支持多系统启动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;树莓派使用了一段时间以后，已经为树莓派装了好多东西，也做了好多配置。有必要为系统做一次备份，就不用每次都重头开始了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="树莓派" scheme="http://ohmerhe.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 实现配置化网络请求</title>
    <link href="http://ohmerhe.com/2016/06/13/kotlin_config_http_kolley/"/>
    <id>http://ohmerhe.com/2016/06/13/kotlin_config_http_kolley/</id>
    <published>2016-06-13T12:23:05.000Z</published>
    <updated>2016-07-09T10:42:40.000Z</updated>
    
    <content type="html">&lt;p&gt;Kotlin官方提供一个DSL的典型应用场景，&lt;a href=&quot;https://github.com/Kotlin/anko&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Anko&lt;/a&gt;致力直接用Kotlin配置页面布局和视图的属性。将布局文件代码化能够带来许多如类型安全、解析效率、代码重用等好处，而&lt;code&gt;Anko&lt;/code&gt;让代码布局和XML一样简洁清晰。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;受到&lt;code&gt;Anko&lt;/code&gt;的启发，让我萌生了把&lt;code&gt;Android&lt;/code&gt;中网络请求纷繁复杂配置信息也封装成配置化方式，实现如下方式的网络请求。&lt;br&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Http.&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url = &lt;span class=&quot;string&quot;&gt;&quot;http://api.openweathermap.org/data/2.5/weather&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    headers &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; - &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;pragma-token&quot;&lt;/span&gt; - &lt;span class=&quot;string&quot;&gt;&#39;33162acxxxxxx5032ad21e0e79ff70d&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    params &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;q&quot;&lt;/span&gt; - &lt;span class=&quot;string&quot;&gt;&quot;shanghai&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;appid&quot;&lt;/span&gt; - &lt;span class=&quot;string&quot;&gt;&quot;d7a98cf22463b1c0c3df4adfe5abbc77&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    onSuccess &amp;#123; bytes -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// handle data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    onFail &amp;#123; error -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// handle error&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;目前该框架已经完成，后面还会继续完善，项目地址&lt;a href=&quot;https://github.com/ohmerhe/Kolley&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kolley&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;奔着这个目标，我把之前自己简单封装的Volley库翻出来，用Kotlin重新封装一下。经过分析总体过程大概如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础代码转Kotlin&lt;/li&gt;
&lt;li&gt;重定义原子Request&lt;/li&gt;
&lt;li&gt;Request构造配置化&lt;/li&gt;
&lt;li&gt;提供RESTful方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;基础代码转Kotlin&quot;&gt;&lt;a href=&quot;#基础代码转Kotlin&quot; class=&quot;headerlink&quot; title=&quot;基础代码转Kotlin&quot;&gt;&lt;/a&gt;基础代码转Kotlin&lt;/h2&gt;&lt;p&gt;之前的框架是参考&lt;a href=&quot;https://github.com/loopj/android-async-http&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-async-http&lt;/a&gt;做的封装，用&lt;code&gt;okhttp&lt;/code&gt;作为网络请求引擎，图片请求缓存模块使用的&lt;code&gt;jakewharton&lt;/code&gt;提供的&lt;code&gt;disklrucache&lt;/code&gt;，这两块都可以复用，先将这部分代码直接转成&lt;code&gt;Kotlin&lt;/code&gt;实现。&lt;/p&gt;
&lt;p&gt;这不需要花太多的功夫，将java代码复制过来以后，直接使用Android Studio的快速转换功能，转换后可能会有一些语法上的错误，稍微处理一下就可以了，得到类似的内容。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OkHttpStack&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@JvmOverloads&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;&lt;/span&gt;(client: OkHttpClient = OkHttpClient()) : HurlStack() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; mFactory: OkUrlFactory&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    init &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mFactory = OkUrlFactory(client)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Throws(IOException::class)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createConnection&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(url: &lt;span class=&quot;type&quot;&gt;URL&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: HttpURLConnection &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mFactory.&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt;(url)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;重定义原子Request&quot;&gt;&lt;a href=&quot;#重定义原子Request&quot; class=&quot;headerlink&quot; title=&quot;重定义原子Request&quot;&gt;&lt;/a&gt;重定义原子Request&lt;/h2&gt;&lt;p&gt;需要在Volley提供的&lt;code&gt;Request&lt;/code&gt;基础上继承一个&lt;code&gt;BaseRequest&lt;/code&gt;预处理一些信息，如params。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ByteRequest&lt;/span&gt;&lt;/span&gt;(method: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;, url: String, errorListener: Response.ErrorListener? = Response.ErrorListener &amp;#123;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;: BaseRequest&amp;lt;ByteArray&amp;gt;(method, url, errorListener) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parseNetworkResponse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(response: &lt;span class=&quot;type&quot;&gt;NetworkResponse&lt;/span&gt;?)&lt;/span&gt;&lt;/span&gt;: Response&amp;lt;ByteArray&amp;gt;? &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Response.success(response?.&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;, HttpHeaderParser.parseCacheHeaders(response))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseRequest&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;D&lt;/span&gt;&amp;gt;&lt;/span&gt;(method: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;, url: String, errorListener: Response.ErrorListener? = Response.ErrorListener &amp;#123;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;: Request&amp;lt;D&amp;gt;(method, url, errorListener) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; DEFAULT_CHARSET = &lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _listener: Response.Listener&amp;lt;D&amp;gt;? = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; _params: MutableMap&amp;lt;String, String&amp;gt; = HashMap() &lt;span class=&quot;comment&quot;&gt;// used for a POST or PUT request.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * Returns a Map of parameters to be used for a POST or PUT request.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getParams&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;: MutableMap&amp;lt;String, String&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _params&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deliverResponse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(response: &lt;span class=&quot;type&quot;&gt;D&lt;/span&gt;?)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _listener?.onResponse(response)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(msg: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (BuildConfig.DEBUG) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Log.d(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.javaClass.simpleName, msg)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Request构造配置化&quot;&gt;&lt;a href=&quot;#Request构造配置化&quot; class=&quot;headerlink&quot; title=&quot;Request构造配置化&quot;&gt;&lt;/a&gt;Request构造配置化&lt;/h2&gt;&lt;p&gt;上一步封装的&lt;code&gt;Request&lt;/code&gt;必须在构造器中提供一些参数，并且像&lt;code&gt;Listener&lt;/code&gt;这样的参数不能直接传递表达式，为配置化调用的封装提供了一定的困难。需要重新封装一个&lt;code&gt;Request&lt;/code&gt;构造器，再在最后交给执行队列的时候创建真正的&lt;code&gt;Request&lt;/code&gt;传递给它，这样让所有网络请求需要的配置信息都可以很方便的构造。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseRequestWapper&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;internal&lt;/span&gt; lateinit &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _request: ByteRequest&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url: String = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; method: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt; = Request.Method.GET&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _start: (() -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Unit&lt;/span&gt;) = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _success: (ByteArray) -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Unit&lt;/span&gt; = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _fail: (VolleyError) -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Unit&lt;/span&gt; = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _finish: (() -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Unit&lt;/span&gt;) = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; _params: MutableMap&amp;lt;String, String&amp;gt; = HashMap() &lt;span class=&quot;comment&quot;&gt;// used for a POST or PUT request.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; _headers: MutableMap&amp;lt;String, String&amp;gt; = HashMap()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tag: Any? = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onStart&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(onStart: ()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Unit&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _start = onStart&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onFail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(onError: (&lt;span class=&quot;type&quot;&gt;VolleyError&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Unit&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _fail = onError&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(onSuccess: (&lt;span class=&quot;type&quot;&gt;ByteArray&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Unit&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _success = onSuccess&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onFinish&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(onFinish: ()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Unit&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _finish = onFinish&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(makeParam: &lt;span class=&quot;type&quot;&gt;RequestPairs&lt;/span&gt;.()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Unit&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; requestPair = RequestPairs()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        requestPair.makeParam()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _params.putAll(requestPair.pairs)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(makeHeader: &lt;span class=&quot;type&quot;&gt;RequestPairs&lt;/span&gt;.()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Unit&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; requestPair = RequestPairs()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        requestPair.makeHeader()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _headers.putAll(requestPair.pairs)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;excute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = url&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Request.Method.GET == method) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            url = getGetUrl(url, _params) &amp;#123; it.toQueryString() &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _request = ByteRequest(method, url, Response.ErrorListener &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            _fail(it)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            _finish()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _request._listener = Response.Listener &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            _success(it)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            _finish()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tag != &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            _request.tag = tag&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Http.getRequestQueue().add(_request)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _start()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getGetUrl&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(url: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, params: &lt;span class=&quot;type&quot;&gt;MutableMap&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, String&amp;gt;, toQueryString: (&lt;span class=&quot;type&quot;&gt;map&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, String&amp;gt;)&lt;/span&gt;&lt;/span&gt; -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    String): String &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (params == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; || params.isEmpty()) url &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;$url&lt;/span&gt;?&lt;span class=&quot;subst&quot;&gt;$&amp;#123;toQueryString(params)&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;&amp;lt;K, V&amp;gt;&lt;/span&gt; Map&lt;span class=&quot;type&quot;&gt;&amp;lt;K, V&amp;gt;&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;toQueryString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;: String = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.map &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;it.key&amp;#125;&lt;/span&gt;=&lt;span class=&quot;subst&quot;&gt;$&amp;#123;it.value&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt; &amp;#125;.joinToString(&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码中将网络请求需要的所有信息全部包装了一层，这样在调用的时候就可以很方便的逐个设置每个参数（当然会有一些默认值），最后在&lt;code&gt;excute()&lt;/code&gt;方法中全部设置给真正的&lt;code&gt;Request&lt;/code&gt;。这个封装保证了下面的调用方式：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;url = &lt;span class=&quot;string&quot;&gt;&quot;http://api.openweathermap.org/data/2.5/weather&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;params &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;q&quot;&lt;/span&gt; - &lt;span class=&quot;string&quot;&gt;&quot;shanghai&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;appid&quot;&lt;/span&gt; - &lt;span class=&quot;string&quot;&gt;&quot;d7a98cf22463b1c0c3df4adfe5abbc77&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;onSuccess &amp;#123; bytes -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// handle data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS：上面&lt;code&gt;params&lt;/code&gt;是的书写方式，使用了&lt;code&gt;Kotlin&lt;/code&gt;的操作符重载功能，具体实现可以下载&lt;a href=&quot;https://github.com/ohmerhe/Kolley&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码&lt;/a&gt;看下。&lt;/p&gt;
&lt;h2 id=&quot;提供RESTful方法&quot;&gt;&lt;a href=&quot;#提供RESTful方法&quot; class=&quot;headerlink&quot; title=&quot;提供RESTful方法&quot;&gt;&lt;/a&gt;提供RESTful方法&lt;/h2&gt;&lt;p&gt;实现到上一步，已经准备的差不多了，接下来还需要最后一步，提供RESTful请求方法。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; Http &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mRequestQueue: RequestQueue? = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(context: &lt;span class=&quot;type&quot;&gt;Context&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Set up the network to use OKHttpURLConnection as the HTTP client.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// getApplicationContext() is key, it keeps you from leaking the&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Activity or BroadcastReceiver if someone passes one in.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mRequestQueue = Volley.newRequestQueue(context.applicationContext, OkHttpStack(OkHttpClient()))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getRequestQueue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;: RequestQueue &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mRequestQueue!!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; request: (&lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;, BaseRequestWapper.() -&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Unit&lt;/span&gt;) -&amp;gt; Request&amp;lt;ByteArray&amp;gt; = &amp;#123; method, request -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; baseRequest = BaseRequestWapper()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        baseRequest.method = method&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        baseRequest.request()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        baseRequest.excute()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        baseRequest._request&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; post = request.partially1(Request.Method.POST)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; put = request.partially1(Request.Method.PUT)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; delete = request.partially1(Request.Method.DELETE)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; head = request.partially1(Request.Method.HEAD)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; options = request.partially1(Request.Method.OPTIONS)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; trace = request.partially1(Request.Method.TRACE)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; patch = request.partially1(Request.Method.PATCH)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的&lt;code&gt;request: (Int, BaseRequestWapper.() -&amp;gt; Unit) -&amp;gt; Request&amp;lt;ByteArray&amp;gt;&lt;/code&gt;方法为网络请求提供了入口、保证了配置化代码都可以在&lt;code&gt;{}&lt;/code&gt;中调用、完成了真正网络请求添加到执行队列。用户可以通过&lt;code&gt;http.requset(method){}&lt;/code&gt;方式发起各种请求。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;val get = request.partially1(Request.Method.GET)&lt;/code&gt;等提供了RESTful方法的封装，实现&lt;code&gt;Http.get{}&lt;/code&gt;的方便调用。&lt;/p&gt;
&lt;h2 id=&quot;后续&quot;&gt;&lt;a href=&quot;#后续&quot; class=&quot;headerlink&quot; title=&quot;后续&quot;&gt;&lt;/a&gt;后续&lt;/h2&gt;&lt;p&gt;关于图片请求模块的实现，其实也是异曲同工，虽然更加复杂一点，但是具体思路是一样的。有兴趣的可以下载&lt;a href=&quot;https://github.com/ohmerhe/Kolley&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码&lt;/a&gt;查看实现，也欢迎提交代码。&lt;/p&gt;
&lt;p&gt;图片请求的方式&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Image.display &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url = &lt;span class=&quot;string&quot;&gt;&quot;http://7xpox6.com1.z0.glb.clouddn.com/android_bg.jpg&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    imageView = mImageView&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    options &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// these values are all default value , you do not need specific them if you do not want to custom&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        imageResOnLoading = R.drawable.default_image&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        imageResOnLoading = R.drawable.default_image&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        imageResOnFail = R.drawable.default_image&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        decodeConfig = Bitmap.Config.RGB_565&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        scaleType = ImageView.ScaleType.CENTER_CROP&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        maxWidth = ImageDisplayOption.DETAULT_IMAGE_WIDTH_MAX&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        maxHeight = ImageDisplayOption.DETAULT_IMAGE_HEIGHT_MAX&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Image.load &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url = &lt;span class=&quot;string&quot;&gt;&quot;http://7xpox6.com1.z0.glb.clouddn.com/android_bg.jpg&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    options &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        scaleType = ImageView.ScaleType.CENTER_CROP&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        maxWidth = ImageDisplayOption.DETAULT_IMAGE_WIDTH_MAX&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        maxHeight = ImageDisplayOption.DETAULT_IMAGE_HEIGHT_MAX&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    onSuccess &amp;#123; bitmap -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _imageView2?.setImageBitmap(bitmap)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    onFail &amp;#123; error -&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        log(error.toString())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Kotlin/anko&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Anko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin Refrence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/volley/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Volley&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://square.github.io/okhttp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OKHttp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Kotlin官方提供一个DSL的典型应用场景，&lt;a href=&quot;https://github.com/Kotlin/anko&quot;&gt;Anko&lt;/a&gt;致力直接用Kotlin配置页面布局和视图的属性。将布局文件代码化能够带来许多如类型安全、解析效率、代码重用等好处，而&lt;code&gt;Anko&lt;/code&gt;让代码布局和XML一样简洁清晰。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://ohmerhe.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://ohmerhe.com/tags/Kotlin/"/>
    
      <category term="网络请求" scheme="http://ohmerhe.com/tags/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>树莓派安装 Nginx 和 PHP</title>
    <link href="http://ohmerhe.com/2016/06/10/raspberry_pi_install_php_nginx/"/>
    <id>http://ohmerhe.com/2016/06/10/raspberry_pi_install_php_nginx/</id>
    <published>2016-06-10T12:56:08.000Z</published>
    <updated>2016-07-09T14:28:40.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;安装Nginx&quot;&gt;&lt;a href=&quot;#安装Nginx&quot; class=&quot;headerlink&quot; title=&quot;安装Nginx&quot;&gt;&lt;/a&gt;安装Nginx&lt;/h2&gt;&lt;p&gt;先将系统更新到最新状态&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;安装Nginx&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install nginx -y&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动Nginx&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo /etc/init.d/nginx start&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果启动成功的话，我们会得到类似的返回&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pi@raspberrypi:~ $ sudo /etc/init.d/nginx start&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[ ok ] Starting nginx (via systemctl): nginx.service.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试远程访问，在浏览器里输入树莓派的ip地址（如果你为你的树莓派配置了域名，也可以通过域名访问），可以看到如下的显示效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpox6.com1.z0.glb.clouddn.com/image/nginx_install_success.png&quot; alt=&quot;nginx_install_success&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装PHP&quot;&gt;&lt;a href=&quot;#安装PHP&quot; class=&quot;headerlink&quot; title=&quot;安装PHP&quot;&gt;&lt;/a&gt;安装PHP&lt;/h2&gt;&lt;p&gt;配合Nginx使用时，PHP的安装包和Apache2配合使用稍微有些不同，PHP以FastCGI接口方式运行，因此我们需要安装&lt;code&gt;PHP FPM&lt;/code&gt;包。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install php5-fpm -y&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装完成后会自动启动PHP服务，或者我们可以通过下面的命令启动。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo service php5-fpm start&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置Nginx和PHP&quot;&gt;&lt;a href=&quot;#配置Nginx和PHP&quot; class=&quot;headerlink&quot; title=&quot;配置Nginx和PHP&quot;&gt;&lt;/a&gt;配置Nginx和PHP&lt;/h2&gt;&lt;p&gt;在Nginx和PHP都安装完成以后，我们需要进行一些简单的配置。默认Nginx的配置信息是放在&lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt;中，我们可以将这个默认文件先备份一下。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo mv /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，然后重新创建一个&lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt;文件，将下面的配置信息添加到该文件中&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo nano /etc/nginx/sites-available/default&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;server &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    listen 80;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    server_name www.myserver.com;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    root /var/www;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    index index.html index.htm index.php;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    access_log /var/log/nginx/myserver.log;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    location ~ \.php$ &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        include snippets/fastcgi-php.conf;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        # With php5-cgi alone:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        #fastcgi_pass 127.0.0.1:9000;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        # With php5-fpm:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fastcgi_pass unix:/var/run/php5-fpm.sock;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建index-php&quot;&gt;&lt;a href=&quot;#创建index-php&quot; class=&quot;headerlink&quot; title=&quot;创建index.php&quot;&gt;&lt;/a&gt;创建index.php&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo vim /var/www/index.php&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将下面的信息添加到文件中&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt; phpinfo(); &lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;重启服务&quot;&gt;&lt;a href=&quot;#重启服务&quot; class=&quot;headerlink&quot; title=&quot;重启服务&quot;&gt;&lt;/a&gt;重启服务&lt;/h3&gt;&lt;p&gt;在上面的配置都完成后，重启Nginx服务&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo service nginx restart&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;服务启动后，可以在浏览器访问该服务，看到如下的效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpox6.com1.z0.glb.clouddn.com/image/nginx_php_pass.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;PS： 如果在Nginx启动过程中出现问题，可以通过&lt;code&gt;nginx -t&lt;/code&gt;查看是什么配置出了问题&lt;/p&gt;
&lt;h3 id=&quot;PHP配置&quot;&gt;&lt;a href=&quot;#PHP配置&quot; class=&quot;headerlink&quot; title=&quot;PHP配置&quot;&gt;&lt;/a&gt;PHP配置&lt;/h3&gt;&lt;p&gt;我们需要编辑&lt;code&gt;/etc/php5/fpm/php.ini&lt;/code&gt;（为了安全性）。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo vim /etc/php5/fpm/php.ini&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后找到&lt;code&gt;cgi.fix_pathinfo=1&lt;/code&gt;这一行，并将其改成&lt;code&gt;cgi.fix_pathinfo=0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;重启PHP服务和Nginx服务&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo service php5-fpm restart&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;[参考资料]&quot;&gt;&lt;/a&gt;[参考资料]&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.stewright.me/2014/06/tutorial-install-nginx-and-php-on-raspbian/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial – Install Nginx and PHP on Raspbian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kevindekoninck.com/raspberry-pi-install-nginx-mysql-php/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raspberry Pi – Install nginx, MySQL &amp;amp; PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://workshop.botter.ventures/2013/09/05/how-to-setup-a-web-server-with-nginxphp-on-raspberry-pi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to setup a web server with Nginx/PHP on Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/questions/can-t-start-nginx-job-for-nginx-service-failed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Can’t start Nginx - Job for nginx.service failed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Nginx&quot;&gt;&lt;a href=&quot;#安装Nginx&quot; class=&quot;headerlink&quot; title=&quot;安装Nginx&quot;&gt;&lt;/a&gt;安装Nginx&lt;/h2&gt;&lt;p&gt;先将系统更新到最新状态&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="树莓派" scheme="http://ohmerhe.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="NGINX" scheme="http://ohmerhe.com/tags/NGINX/"/>
    
      <category term="PHP" scheme="http://ohmerhe.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>树莓派安装 MySQL</title>
    <link href="http://ohmerhe.com/2016/06/04/raspberry_install_mysql/"/>
    <id>http://ohmerhe.com/2016/06/04/raspberry_install_mysql/</id>
    <published>2016-06-03T16:12:53.000Z</published>
    <updated>2016-07-09T14:26:15.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;先将系统更新到最新状态&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;然后安装&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install mysql-server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着会提示你为&lt;code&gt;root&lt;/code&gt;用户设置密码，并且确认密码。输入完成后，稍等mysql就安装完成。可以测试一下。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysql -u root -p&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后输入刚刚设置的密码。&lt;/p&gt;
&lt;h2 id=&quot;开启远程登录&quot;&gt;&lt;a href=&quot;#开启远程登录&quot; class=&quot;headerlink&quot; title=&quot;开启远程登录&quot;&gt;&lt;/a&gt;开启远程登录&lt;/h2&gt;&lt;h3 id=&quot;配置权限&quot;&gt;&lt;a href=&quot;#配置权限&quot; class=&quot;headerlink&quot; title=&quot;配置权限&quot;&gt;&lt;/a&gt;配置权限&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo nano /etc/mysql/my.cnf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;找到下一行，并且将&lt;code&gt;bind-address&lt;/code&gt;的值改成&lt;code&gt;0.0.0.0&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;bind&lt;/span&gt;-address = 0.0.0.0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为root用户开启远程登录权限，并且限制在局域网内&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;GRANT ALL PRIVILEGES ON *.* TO &lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&#39;192.168.1.%&#39;&lt;/span&gt; IDENTIFIED BY &lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt; WITH GRANT OPTION;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重启MySQL服务&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo /etc/init.d/mysql restart&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;打开3306端口&quot;&gt;&lt;a href=&quot;#打开3306端口&quot; class=&quot;headerlink&quot; title=&quot;打开3306端口&quot;&gt;&lt;/a&gt;打开&lt;code&gt;3306&lt;/code&gt;端口&lt;/h3&gt;&lt;p&gt;最后用&lt;code&gt;iptables&lt;/code&gt;打开&lt;code&gt;3306&lt;/code&gt;端口&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;iptables -A INPUT -i eth0 -p tcp -m tcp --dport 3306 -j ACCEPT&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者限定固定的&lt;code&gt;ip&lt;/code&gt;才能访问&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo iptables -A INPUT -i eth0 &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; 192.168.1.0/24 -p tcp --destination-port 3306 -j ACCEPT&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;测试访问&quot;&gt;&lt;a href=&quot;#测试访问&quot; class=&quot;headerlink&quot; title=&quot;测试访问&quot;&gt;&lt;/a&gt;测试访问&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; X | telnet &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; X 192.168.1.110 3306&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;nc -z -w1 192.168.1.110 3306&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;成功的话，会看到类似的输出&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Connection to 192.168.199.121 port 3306 [tcp/mysql] succeeded!&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.stewright.me/2014/06/tutorial-install-mysql-server-on-raspberry-pi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial – Install MySQL server on Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pimylifeup.com/raspberry-pi-mysql-phpmyadmin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raspberry Pi MYSQL &amp;amp; PHPMyAdmin Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cyberciti.biz/tips/how-do-i-enable-remote-access-to-mysql-database-server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How Do I Enable Remote Access To MySQL Database Server?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/forums/viewtopic.php?f=36&amp;amp;t=20214&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Remote Access to Mysql on PI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;先将系统更新到最新状态&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://ohmerhe.com/tags/MySQL/"/>
    
      <category term="树莓派" scheme="http://ohmerhe.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>树莓派入手，无显示器远程操作</title>
    <link href="http://ohmerhe.com/2016/05/31/raspberry_pi_init/"/>
    <id>http://ohmerhe.com/2016/05/31/raspberry_pi_init/</id>
    <published>2016-05-30T16:11:57.000Z</published>
    <updated>2016-07-09T14:28:00.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;下载镜像文件&quot;&gt;&lt;a href=&quot;#下载镜像文件&quot; class=&quot;headerlink&quot; title=&quot;下载镜像文件&quot;&gt;&lt;/a&gt;下载镜像文件&lt;/h2&gt;&lt;p&gt;官网下载相应的镜像文件：&lt;a href=&quot;https://www.raspberrypi.org/downloads/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.raspberrypi.org/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也可以下载Centos系统：&lt;a href=&quot;http://mirror.centos.org/altarch/7/isos/armhfp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mirror.centos.org/altarch/7/isos/armhfp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我这里下载的是官网推荐的”RASPBIAN WHEEZY”&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;烧录镜像文件&quot;&gt;&lt;a href=&quot;#烧录镜像文件&quot; class=&quot;headerlink&quot; title=&quot;烧录镜像文件&quot;&gt;&lt;/a&gt;烧录镜像文件&lt;/h2&gt;&lt;p&gt;在mac下可以参考&lt;a href=&quot;http://shumeipai.nxez.com/2014/05/18/raspberry-pi-under-mac-osx-to-install-raspbian-system.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac OSX下给树莓派安装Raspbian系统&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在Windows下面的话直接使用&lt;code&gt;Win32 Disk Imager&lt;/code&gt;进行烧录。&lt;/p&gt;
&lt;h2 id=&quot;初始化系统操作&quot;&gt;&lt;a href=&quot;#初始化系统操作&quot; class=&quot;headerlink&quot; title=&quot;初始化系统操作&quot;&gt;&lt;/a&gt;初始化系统操作&lt;/h2&gt;&lt;h3 id=&quot;激活root用户&quot;&gt;&lt;a href=&quot;#激活root用户&quot; class=&quot;headerlink&quot; title=&quot;激活root用户&quot;&gt;&lt;/a&gt;激活root用户&lt;/h3&gt;&lt;p&gt;raspberrypi系统默认提供的用户为&lt;code&gt;pi&lt;/code&gt;，密码为&lt;code&gt;raspberry&lt;/code&gt;，so，第一步我们就是要激活&lt;code&gt;root&lt;/code&gt;帐号：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 设置 root 账号的密码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo passwd root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 启用 root 账号登录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo passwd --unlock root&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是需要注意的是，root帐号启用后，默认不支持远程登录。&lt;/p&gt;
&lt;h3 id=&quot;配置ssh-key证书登录&quot;&gt;&lt;a href=&quot;#配置ssh-key证书登录&quot; class=&quot;headerlink&quot; title=&quot;配置ssh key证书登录&quot;&gt;&lt;/a&gt;配置ssh key证书登录&lt;/h3&gt;&lt;p&gt;为了减去每次远程登录系统都需要手动输入密码，同样也更加安全，可以配置ssh key登录，ssh key的生成参考&lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;generating-ssh-keys&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在服务端生成&lt;code&gt;.ssh/authorized_keys&lt;/code&gt;文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mkdir .ssh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;touch .ssh/authorized_keys&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将本地的公匙复制到&lt;code&gt;.ssh/authorized_keys&lt;/code&gt;文件中&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; XXXX &amp;gt;&amp;gt; .ssh/authorized_keys &lt;span class=&quot;comment&quot;&gt;#XXXX替换成对应的公匙&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者直接执行&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cat ~/.ssh/id_rsa.pub | ssh pi@192.168.199.121 &lt;span class=&quot;string&quot;&gt;&#39;mkdir -p .ssh &amp;amp;&amp;amp; cat - &amp;gt;&amp;gt; ~/.ssh/authorized_keys&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;网络配置&quot;&gt;&lt;a href=&quot;#网络配置&quot; class=&quot;headerlink&quot; title=&quot;网络配置&quot;&gt;&lt;/a&gt;网络配置&lt;/h3&gt;&lt;p&gt;执行&lt;code&gt;ifconfig&lt;/code&gt;命令,查看网卡物理地址，将该网址在路由器上绑定到固定的ip&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;eth0      Link encap:Ethernet  HWaddr 38:22:db:e7:ed:0c // 物理地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          UP BROADCAST MULTICAST  MTU:1500  Metric:1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          RX packets:0 errors:0 dropped:0 overruns:0 frame:0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          collisions:0 txqueuelen:1000&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后执行&lt;code&gt;sudo nano /etc/network/interfaces&lt;/code&gt;，将&lt;code&gt;manual&lt;/code&gt;改为&lt;code&gt;dhcp&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;iface eth0 inet dhcp&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你有无线网卡的话，还要进行无线网络的配置，首先一样的需要将无线网络的网卡地址在路由器上绑定到一个固定ip。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wlan0     Link encap:Ethernet  HWaddr e2:42:06:3e:w5:4e  // 物理地址&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后需要将无线网络的名称和密码设置一下&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;iface wlan0 inet dhcp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wpa-ssid 网络名称&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wpa-psk 网络密码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;扩大系统容量&quot;&gt;&lt;a href=&quot;#扩大系统容量&quot; class=&quot;headerlink&quot; title=&quot;扩大系统容量&quot;&gt;&lt;/a&gt;扩大系统容量&lt;/h3&gt;&lt;p&gt;树莓派默认并没有完全加载SD卡的内存容量，通过运行&lt;code&gt;sudo raspi-config&lt;/code&gt;调出树莓派的配置界面&lt;/p&gt;
&lt;p&gt;选择第一项&lt;code&gt;Expand Filesystem&lt;/code&gt;,确认重启后可以再执行&lt;code&gt;df -h&lt;/code&gt;查看系统容量已经增大&lt;/p&gt;
&lt;h3 id=&quot;替换软件源的国内镜像&quot;&gt;&lt;a href=&quot;#替换软件源的国内镜像&quot; class=&quot;headerlink&quot; title=&quot;替换软件源的国内镜像&quot;&gt;&lt;/a&gt;替换软件源的国内镜像&lt;/h3&gt;&lt;p&gt;国内有许多平台提供了树莓派的软件源的国内镜像，具体参考&lt;a href=&quot;https://segmentfault.com/a/1190000000503041&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;镜像列表&lt;/a&gt;。这里选择阿里云的镜像地址：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cp /etc/apt/sources.list /etc/apt/sources.list.bak&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo vi /etc/apt/sources.list&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//将原来的注释掉，替换成如下软件源地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;deb http://mirrors.aliyun.com/raspbian/raspbian/ jessie main non-free contrib&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;deb-src http://mirrors.aliyun.com/raspbian/raspbian/ jessie main non-free contrib&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS：有些库国内镜像并没有及时同步，如果安装软件出现问题时，可以尝试再把镜像地址换回官方镜像尝试一下&lt;/p&gt;
&lt;h3 id=&quot;安装常用软件&quot;&gt;&lt;a href=&quot;#安装常用软件&quot; class=&quot;headerlink&quot; title=&quot;安装常用软件&quot;&gt;&lt;/a&gt;安装常用软件&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install vim wget -y&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装samba&quot;&gt;&lt;a href=&quot;#安装samba&quot; class=&quot;headerlink&quot; title=&quot;安装samba&quot;&gt;&lt;/a&gt;安装samba&lt;/h2&gt;&lt;p&gt;最后也来装个家庭内部NAS服务玩玩&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 更新源&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get update&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 安装samba&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install samba samba-common-bin -y&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建samba文件夹&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mkdir /samba&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 修改samba的访问权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo chmod 777 /samba&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装好samba后，需要配置samba分享的信息，编辑&lt;code&gt;/etc/samba/smb.conf&lt;/code&gt;文件，在文件的末尾添加如下内容：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[share]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   comment = share folder&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   path = /samba&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   browseable = yes&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   valid users = root pi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   public = yes&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   writable = yes&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Path to the directory you want scanned for media files.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# This option can be specified more than once if you want multiple directories&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# scanned.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# If you want to restrict a media_dir to a specific content type, you can&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# prepend the directory name with a letter representing the type (A, P or V),&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# followed by a comma, as so:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   * &quot;A&quot; for audio    (eg. media_dir=A,/var/lib/minidlna/music)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   * &quot;P&quot; for pictures (eg. media_dir=P,/var/lib/minidlna/pictures)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   * &quot;V&quot; for video    (eg. media_dir=V,/var/lib/minidlna/videos)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# WARNING: After changing this option, you need to rebuild the database. Either&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#          run minidlna with the &#39;-R&#39; option, or delete the &#39;files.db&#39; file&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#          from the db_dir directory (see below).&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#          On Debian, you can run, as root, &#39;service minidlna force-reload&#39; instead.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;media_dir=/samba/DLNA&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;media_dir=A,/samba/DLNA/Music&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;media_dir=P,/samba/DLNA/Picture&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;media_dir=V,/samba/DLNA/Video&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Path to the directory that should hold the database and album art cache.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;db_dir=/samba/DLNA/db&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Path to the directory that should hold the log file.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;_dir=/samba/DLNA/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo /etc/init.d/minidlna restart&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//查看状态&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo /etc/init.d/minidlna status &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[ ok ] minidlna is running.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo vim /etc/rc.local&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/bin/sh -e&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# rc.local&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# This script is executed at the end of each multiuser runlevel.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Make sure that the script will &quot;exit 0&quot; on success or any other&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# value on error.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# In order to enable or disable this script just change the execution&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# bits.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# By default this script does nothing.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Print the IP address&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;_IP=$(hostname -I) || &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$_IP&lt;/span&gt;&quot;&lt;/span&gt; ]; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;My IP address is %s&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&quot; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$_IP&lt;/span&gt;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#==============================&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo /etc/init.d/samba restart&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo /etc/init.d/minidlna restart&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#==============================&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt; 0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考内容&quot;&gt;&lt;a href=&quot;#参考内容&quot; class=&quot;headerlink&quot; title=&quot;参考内容&quot;&gt;&lt;/a&gt;参考内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000000503041&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;树莓派及其他硬件平台国内外Linux镜像站全汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shumeipai.nxez.com/2014/05/18/raspberry-pi-under-mac-osx-to-install-raspbian-system.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac OSX下给树莓派安装Raspbian系统&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载镜像文件&quot;&gt;&lt;a href=&quot;#下载镜像文件&quot; class=&quot;headerlink&quot; title=&quot;下载镜像文件&quot;&gt;&lt;/a&gt;下载镜像文件&lt;/h2&gt;&lt;p&gt;官网下载相应的镜像文件：&lt;a href=&quot;https://www.raspberrypi.org/downloads/&quot;&gt;https://www.raspberrypi.org/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也可以下载Centos系统：&lt;a href=&quot;http://mirror.centos.org/altarch/7/isos/armhfp/&quot;&gt;http://mirror.centos.org/altarch/7/isos/armhfp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我这里下载的是官网推荐的”RASPBIAN WHEEZY”&lt;/p&gt;
    
    </summary>
    
    
      <category term="树莓派" scheme="http://ohmerhe.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>优化 Gradle 编译速度实践</title>
    <link href="http://ohmerhe.com/2016/02/26/gradle_speed_up/"/>
    <id>http://ohmerhe.com/2016/02/26/gradle_speed_up/</id>
    <published>2016-02-26T08:25:44.000Z</published>
    <updated>2016-07-09T08:04:08.000Z</updated>
    
    <content type="html">&lt;p&gt;随着项目规模越来越大，编译速度越来越慢，每次修改代码以后的编译都是痛苦的等待。对于兄弟们来说，gradle已经变成了一个潜藏的‘岁月神偷’。So，现在是时候我们来优化一下gradle的编译速度。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;本文优化的实践主要是参考&lt;a href=&quot;http://androidweekly.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Weekly&lt;/a&gt;上推荐的一篇文章&lt;a href=&quot;https://medium.com/@shelajev/6-tips-to-speed-up-your-gradle-build-3d98791d3df9#.3ait6jmd3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;6 tips to speed up your Gradle build&lt;/a&gt;和&lt;a href=&quot;https://docs.gradle.org/current/userguide/userguide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gradle官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;先看看我们都有神马方法可以用先：&lt;/p&gt;
&lt;h2 id=&quot;Gradle-Daemon&quot;&gt;&lt;a href=&quot;#Gradle-Daemon&quot; class=&quot;headerlink&quot; title=&quot;Gradle Daemon&quot;&gt;&lt;/a&gt;Gradle Daemon&lt;/h2&gt;&lt;p&gt;Gradle Daemon是gradle官方极力推荐的一个优化gradle编译速度的方法在1.0之前的版本就已经提供，经过这么多的版本迭代，已经非常成熟。如果你的gradle版本足够新并且没有开启Daemon的话，在你的编译完成之后，经常会看到这样一句话：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;This build could be faster, please consider using the Gradle Daemon: https://docs.gradle.org/2.8/userguide/gradle_daemon.html&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Gradle Daemon是一个长期生存（3个小时不被调用会自动结束）、能够提升编译速度的后台进程。它的优化原理有几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于gradle是运行在JVM之上的，并且有较多的库依赖，长期运行在后台能够节省每次编译需要重新初始化的时间。&lt;/li&gt;
&lt;li&gt;另外一个很重要的一点是通过运行时代码优化来提升编译性能。这种优化是循序渐进的，而不是立马见效的那种，也就是随着编译次数的增多，优化效果会越来越好，一般来讲在5-10次编译以后，这种优化效果会趋于稳定。&lt;/li&gt;
&lt;li&gt;Gradle Daemon通过编译缓存提高效率。如gradle能缓存一些编译时的输入和输出，支持增量编译。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gradle官方对于Gradle Daemon还有更多的期待，比如预下载依赖库等&lt;/p&gt;
&lt;h3 id=&quot;开启Daemon&quot;&gt;&lt;a href=&quot;#开启Daemon&quot; class=&quot;headerlink&quot; title=&quot;开启Daemon&quot;&gt;&lt;/a&gt;开启Daemon&lt;/h3&gt;&lt;p&gt;Gradle Daemon默认不是开启的，我们可以有多个方式开启的deamon，但是官方推荐的方法是在系统的gradle配置文件（$USER_HOME/.gradle/gradle.properties）中：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;org.gradle.daemon=true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果该文件不存在，需要创建该文件。&lt;/p&gt;
&lt;p&gt;我们还可以在执行命令后面添加&lt;code&gt;--no-daemon&lt;/code&gt;和&lt;code&gt;--daemon&lt;/code&gt;指定某次编译过程是否开启deamon。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;不过在持续集成中，gradle官方建议不要开启deamon以保证每次编译的独立性。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Configuration-on-demand&quot;&gt;&lt;a href=&quot;#Configuration-on-demand&quot; class=&quot;headerlink&quot; title=&quot;Configuration on demand&quot;&gt;&lt;/a&gt;Configuration on demand&lt;/h2&gt;&lt;p&gt;gradle编译区分为三个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化，gradle支持单个或多个项目同时编译，在初始化阶段，gradle决定哪些项目参与编译，并为每一个项目创建一个&lt;a href=&quot;https://docs.gradle.org/current/dsl/org.gradle.api.Project.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Project&lt;/a&gt;实例。&lt;/li&gt;
&lt;li&gt;配置阶段，对所有的项目进行配置，会执行项目里的build.gradle文件，下载相关的插件和依赖等，决定需要执行哪些任务的集合。&lt;/li&gt;
&lt;li&gt;执行阶段，执行在配置阶段确定的所有task。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按需配置（Configuration on demand）只对任务相关的项目进行配置，这在大型多项目编译过程中非常有用，能够大幅度的减少不必要的配置时间。gradle官方表示在长期的角度来看，按需配置会变成一项默认模式，甚至是唯一的模式。&lt;/p&gt;
&lt;p&gt;不过在大部分的安卓项目中，由于项目会太，且一般多使用aar的方式引用，所以该配置项对于安卓开发编译的优化效果没有那么大。按需配置功能现在还是孵化中，并没有正式发布。&lt;/p&gt;
&lt;h3 id=&quot;Configuration-on-demand开启&quot;&gt;&lt;a href=&quot;#Configuration-on-demand开启&quot; class=&quot;headerlink&quot; title=&quot;Configuration on demand开启&quot;&gt;&lt;/a&gt;Configuration on demand开启&lt;/h3&gt;&lt;p&gt;和Daemon的配置类似，我们也可以在系统的&lt;code&gt;gradle.properties&lt;/code&gt;中添加如下配置：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;org.gradle.configureondemand=true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者在编译命令后面添加&lt;code&gt;--configure-on-demand&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;parallel&quot;&gt;&lt;a href=&quot;#parallel&quot; class=&quot;headerlink&quot; title=&quot;parallel&quot;&gt;&lt;/a&gt;parallel&lt;/h2&gt;&lt;p&gt;并行执行在多项目编译的项目中能有效提升编译的速度，但是并行执行的前提是每个项目已经被模块化，每个项目之间没有耦合。并行执行功能现在也还是孵化中，并没有正式发布。&lt;/p&gt;
&lt;h3 id=&quot;开启parallel&quot;&gt;&lt;a href=&quot;#开启parallel&quot; class=&quot;headerlink&quot; title=&quot;开启parallel&quot;&gt;&lt;/a&gt;开启parallel&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;org.gradle.parallel=true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者在编译命令后面添加&lt;code&gt;--parallel&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;项目解耦&quot;&gt;&lt;a href=&quot;#项目解耦&quot; class=&quot;headerlink&quot; title=&quot;项目解耦&quot;&gt;&lt;/a&gt;项目解耦&lt;/h2&gt;&lt;p&gt;Gradle允许任何项目在配置和执行阶段访问其他项目。这是一把双刃剑，一方面为编译提供了灵活性；另一方面也会带来一些负面的阻碍，对并行编译和按需配置产生影响。&lt;/p&gt;
&lt;p&gt;两个互相解耦的项目之间最多只能有申明的依赖关系，任何其他形式的交互都被定为成耦合。一种常见的耦合方式就是使用配置注入，例如在项目中使用&lt;code&gt;allprojects&lt;/code&gt;或&lt;code&gt;subprojects&lt;/code&gt;关键字就会导致项目之间的耦合。通常这会被定义在一个只有一些公共配置的‘根项目’中，这导致这个‘根项目’被耦合到所有子项目中，但这是可以被接受的。但如果任何子项目中使用&lt;code&gt;allprojects&lt;/code&gt;或&lt;code&gt;subprojects&lt;/code&gt;是就会影响到并行编译和按需配置的效率。&lt;/p&gt;
&lt;p&gt;为了充分利用项目之间解耦的优势，gradle官方已经在尝试引入不会产生耦合的新特性来处理配置注入这种常用功能。&lt;/p&gt;
&lt;p&gt;关于如何解耦项目，官方给了两条建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免在一个子项目的build.gradle中去引用其他的子项目，最好是从‘根项目’中引用；&lt;/li&gt;
&lt;li&gt;避免在执行时改变其他项目的配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;其他优化方法&quot;&gt;&lt;a href=&quot;#其他优化方法&quot; class=&quot;headerlink&quot; title=&quot;其他优化方法&quot;&gt;&lt;/a&gt;其他优化方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;优化依赖，gradle允许我们在依赖一个项目是可以指定一个版本范围（如下），这会导致gradle每次都会去检测当前版本是不是最新版本，这会带来不必要的资源消耗，尤其在网络环境差时。而且这种写法还会导致版本兼容和持续集成时的不一致性等问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	compile &amp;apos;com.google.code.gson:gson:2.+&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;gradle的每次更新都会不断优化它的编译性能，同时也可能会提供更多新的特性去优化编译，所以我们应该尽量使用最新发布的正式版本去编译，如2.4这个版本在编译速度方面就做了非常大提升。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说了这么多，下面让我们来实践一下：&lt;/p&gt;
&lt;h2 id=&quot;优化实践&quot;&gt;&lt;a href=&quot;#优化实践&quot; class=&quot;headerlink&quot; title=&quot;优化实践&quot;&gt;&lt;/a&gt;优化实践&lt;/h2&gt;&lt;p&gt;为了比较优化前后的差异，我先记录一下优化前的编译实践。我这里选取的是&lt;code&gt;assembleDebug&lt;/code&gt;的执行时间。&lt;/p&gt;
&lt;p&gt;为了减少误差，我每次修改少量代码，编译了五次。虽然不能作为实验数据使用，但是用来说名问题应该已经够了。五次执行的时间如下，平均大概在1min30s。&lt;/p&gt;
&lt;p&gt;## &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Executing external task &amp;apos;assembleDebug&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;BUILD SUCCESSFUL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Total time: 1 mins 32.81 secs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Total time: 1 mins 19.539 secs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Total time: 1 mins 22.601 secs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Total time: 1 mins 26.14 secs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Total time: 1 mins 38.686 secs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，开始优化我们的编译配置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在我的gradle全局配置中添加如下配置：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;org.gradle.daemon=true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;org.gradle.configureondemand=true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;org.gradle.parallel=true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;由于Dexguard的阻碍，我们的项目的gradle版本不能高于2.8版本，所以只能放弃（最新版本已经是2.11）。&lt;/li&gt;
&lt;li&gt;检查了一下所有的依赖没有使用版本范围的依赖。&lt;/li&gt;
&lt;li&gt;检查所有项目除了根项目，没有项目间的耦合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;准备就绪，开始执行。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gradle assembleDebug&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Parallel execution with configuration on demand is an incubating feature.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Total time: 1 mins 41.859 secs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Total time: 1 mins 1.363 secs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Total time: 1 mins 0.425 secs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Total time: 59.915 secs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Total time: 56.681 secs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Total time: 56.047 secs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Total time: 55.667 secs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到编译时间经过几次编译以后，基本稳定在50-60s之间，编译速度有了明显的提示。&lt;/p&gt;
&lt;p&gt;为了区分哪个优化效果最好，我还做了几个简单的实验，最后发现按需配置和并行编译并没有明显的提升，能够带来明显提升的就是deamon。这应该和我本地只有两个直接的代码依赖库有关。&lt;/p&gt;
&lt;p&gt;最后需要说明的是，Android Studio在编译时已经开启一些优化方案，如deamon和按需配置。针对AS上的编译优化，我的建议就是在条件允许的情况下，及时升级最新的AS版本、Android的gradle插件版本、gradle的版本等相关工具的版本。&lt;/p&gt;
&lt;h2 id=&quot;参考文件&quot;&gt;&lt;a href=&quot;#参考文件&quot; class=&quot;headerlink&quot; title=&quot;参考文件&quot;&gt;&lt;/a&gt;参考文件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@shelajev/6-tips-to-speed-up-your-gradle-build-3d98791d3df9#.3ait6jmd3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;6 tips to speed up your Gradle build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/multi_project_builds.html#sec:configuration_on_demand&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Configuration on demand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:build_phases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Multi-project builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_daemon.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Gradle Daemon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/build_environment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Build Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/multi_project_builds.html#sec:decoupled_projects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Decoupled Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;随着项目规模越来越大，编译速度越来越慢，每次修改代码以后的编译都是痛苦的等待。对于兄弟们来说，gradle已经变成了一个潜藏的‘岁月神偷’。So，现在是时候我们来优化一下gradle的编译速度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://ohmerhe.com/tags/Android/"/>
    
      <category term="Gradle" scheme="http://ohmerhe.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>安卓事件传递机制分析</title>
    <link href="http://ohmerhe.com/2016/02/01/android_event_pass_parsing/"/>
    <id>http://ohmerhe.com/2016/02/01/android_event_pass_parsing/</id>
    <published>2016-02-01T10:38:00.000Z</published>
    <updated>2016-07-09T09:50:27.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章基于Android4.2的源码分析得出，写的比较早，拿出来晒晒。&lt;/p&gt;
&lt;p&gt;这片文章讲解的事件传递的起源从dispatchTouchEvent(event)开始，根据事件的处理流程逐渐展开，直至事件被可预料的处理掉结束。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;先贴一张个人总结的事件传递的流程图，如果可以将这张图清楚的理解，下面的文章就可以不用看了，因为这篇文章的主要内容也就是围绕这幅图展开。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpox6.com1.z0.glb.clouddn.com/image/android_view_event_pass.jpg&quot; alt=&quot;事件分发流程图&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ViewGroup中的事件处理&quot;&gt;&lt;a href=&quot;#ViewGroup中的事件处理&quot; class=&quot;headerlink&quot; title=&quot;ViewGroup中的事件处理&quot;&gt;&lt;/a&gt;ViewGroup中的事件处理&lt;/h2&gt;&lt;p&gt;在用户触碰屏幕后，经过系统一系列处理后，会分发到的View的dispatchTouchEvent方法中，事件将在这个方法中进行分发，决定该事件的去向。&lt;/p&gt;
&lt;p&gt;由于安卓的事件处理顺序是由外至里的，既外层视图最先拿到对应的事件，既事件会优先传递到ViewGroup的dispatchTouchEvent方法中。在自定义视图中可以重写dispatchTouchEvent这个方法定义事件的进一步分发，本文分析的是ViewGroup默认的分发机制。&lt;/p&gt;
&lt;p&gt;在ViewGroup中默认先将事件分发给onInterceptTouchEvent方法，通过该方法的返回来判断当前视图是否中断事件的进一步分发，如果onInterceptTouchEvent返回true，则该事件认为已经被消耗不会继续分发下去。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!disallowIntercept) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    intercepted = onInterceptTouchEvent(ev);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ev.setAction(action); &lt;span class=&quot;comment&quot;&gt;// restore action in case it was changed  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    intercepted = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ViewGroup默认并不会中断该事件，而是直接返回false。在自定义的视图中，可以通过重写onInterceptTouchEvent返回true而中断所有事件的分发。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onInterceptTouchEvent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MotionEvent ev)&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果事件在当前视图没有被截取，ViewGroup会继续分发事件，判断自己是否有子视图符合接收该事件的条件，如果有的话，则直接将事件分发给该子视图，并返回true代表在这层事件已经被分发出去。该视图的子视图可以是一个普通的view，也可以是一个Viewgroup。当子视图是一个View的时候，请参考下面View的事件处理部分。当子视图是一个ViewGroup，则重复前面描述的分发逻辑。&lt;/p&gt;
&lt;p&gt;如果没有子视图消耗掉当前的事件，这个事件最终被传递到ViewGroup本身，这个时候ViewGroup将作为一个普通的View继续处理事件（详细参见后面的View处理事件部分）&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!canViewReceivePointerEvents(child)|| !isTransformedTouchPointInView(x, y, child, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;newTouchTarget = getTouchTarget(child);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (newTouchTarget != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Child is already receiving touch within its bounds.  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Give it the new pointer in addition to the ones it is handling.  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    newTouchTarget.pointerIdBits |= idBitsToAssign;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;resetCancelNextUpFlag(child);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dispatchTransformedTouchEvent(ev, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, child, idBitsToAssign)) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Child wants to receive touch within its bounds.  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mLastTouchDownTime = ev.getDownTime();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mLastTouchDownIndex = childIndex;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mLastTouchDownX = ev.getX();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mLastTouchDownY = ev.getY();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    newTouchTarget = addTouchTarget(child, idBitsToAssign);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    alreadyDispatchedToNewTouchTarget = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;View中的事件处理&quot;&gt;&lt;a href=&quot;#View中的事件处理&quot; class=&quot;headerlink&quot; title=&quot;View中的事件处理&quot;&gt;&lt;/a&gt;View中的事件处理&lt;/h2&gt;&lt;p&gt;View中的事件分发仍然是从dispatchTouchEvent方法开始。该方法中首先会将事件分发给调用到mOnTouchListener，mOnTouchListener是我们在使用view的setOnTouchListener方法时注册进去的监听。如果我们在注册进去监听的onTouch方法中处理了该事件并且返回了true则代表该事件已经被消耗，事件将不会在继续传递。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ListenerInfo li = mListenerInfo;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (li != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; li.mOnTouchListener != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; (mViewFlags &amp;amp; ENABLED_MASK) == ENABLED  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;amp;&amp;amp; li.mOnTouchListener.onTouch(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, event)) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (onTouchEvent(event)) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而如果没有设置监听或返回为false的话，该事件将会被传递到onTouchEvent方法。在View类默认的onTouchEvent方法中，会将事件分发到视图的click或者longClick事件。&lt;/p&gt;
&lt;p&gt;用户需用通过setOnClickListener或者setOnLongClickListener设置click的处理，如果我们设置了listener，则onTouchEvent分发完事件后会返回true通知该事件已经被消耗。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mPerformClick == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mPerformClick = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PerformClick();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!post(mPerformClick)) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    performClick();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ListenerInfo li = mListenerInfo;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (li != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; li.mOnClickListener != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    playSoundEffect(SoundEffectConstants.CLICK);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    li.mOnClickListener.onClick(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ps: 从上面的代码指导view的click方法并不是直接调用执行的，而是通过post将click的处理延迟以保证视觉效果的优先执行。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先接收到事件的视图是最外层的视图，然后再往子视图上传递&lt;/li&gt;
&lt;li&gt;事件的传递是一个递归过程&lt;/li&gt;
&lt;li&gt;在上述每个环节都可以通过返回true的方法消耗该事件，结束事件的传递&lt;/li&gt;
&lt;li&gt;自定义视图的事件传递过程决定于其对应继承的方法，但应该遵守上述的规则&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章基于Android4.2的源码分析得出，写的比较早，拿出来晒晒。&lt;/p&gt;
&lt;p&gt;这片文章讲解的事件传递的起源从dispatchTouchEvent(event)开始，根据事件的处理流程逐渐展开，直至事件被可预料的处理掉结束。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://ohmerhe.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>WeakHandler 是怎么解决 Handler 的内存问题的</title>
    <link href="http://ohmerhe.com/2016/01/18/how-to-work-weakhandler/"/>
    <id>http://ohmerhe.com/2016/01/18/how-to-work-weakhandler/</id>
    <published>2016-01-18T15:32:01.000Z</published>
    <updated>2016-07-09T14:24:00.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;问题回顾&quot;&gt;&lt;a href=&quot;#问题回顾&quot; class=&quot;headerlink&quot; title=&quot;问题回顾&quot;&gt;&lt;/a&gt;问题回顾&lt;/h2&gt;&lt;h3 id=&quot;内存泄露&quot;&gt;&lt;a href=&quot;#内存泄露&quot; class=&quot;headerlink&quot; title=&quot;内存泄露&quot;&gt;&lt;/a&gt;内存泄露&lt;/h3&gt;&lt;p&gt;什么是内存泄露，请参考&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/l-JavaMemoryLeak/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java的内存泄漏&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Handler内存泄露&quot;&gt;&lt;a href=&quot;#Handler内存泄露&quot; class=&quot;headerlink&quot; title=&quot;Handler内存泄露&quot;&gt;&lt;/a&gt;Handler内存泄露&lt;/h3&gt;&lt;p&gt;对于安卓的初学者，常见的handler的写法如下：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Handler mHandler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Handler() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Message msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// ... &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的代码中，mHandler作为SampleActivity的内部匿名类的对象，持有对父类对象的引用。为了保证在子线程（一般是后台线程，可能比较耗时）能够通过Handler和主线程进行通讯，一般该子线程需要持有对应Handler的对象。因此，如上的代码即使SampleActivity被关闭，mHandler由于子线程的引用并不会被回收，同样mHandler厘面引用的SampleActivity对象也不会被回收（内存泄露）。&lt;/p&gt;
&lt;h3 id=&quot;Runnable内存泄露&quot;&gt;&lt;a href=&quot;#Runnable内存泄露&quot; class=&quot;headerlink&quot; title=&quot;Runnable内存泄露&quot;&gt;&lt;/a&gt;Runnable内存泄露&lt;/h3&gt;&lt;p&gt;在发起一个延时操作时，通常会这样写：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mHandler.postDelayed(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的实现Runnable接口的内部匿名类同样也持有了外部类（通常是Activity）的引用，这个对象作为Message的属性会一直存在直到达到指定的延时时长。这就很有可能在Activity被关闭时导致Activity不能及时被回收。&lt;/p&gt;
&lt;p&gt;有一些文章说这种情况也会造成mHandler的泄露，这一点我不太认同，因为Message对象或者后面保存Message的MessageQueue本身都没有持有对mHandler的引用，所以按理说这里应该不会造成mHandler的泄露。&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;p&gt;对于上面的问题，已经可以找到比较多的解决方案，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态内部类或独立类，一般针对Handler泄露的方案。既避免使用非静态内部类，这样Handler的对象就不会因为持有外部Activity的对象而造成泄露。&lt;/li&gt;
&lt;li&gt;弱引用，能够从根源处解决内存泄露问题。为了编写代码的方便性，一般不建议Runnable使用静态内部类或独立类来解决Runnable的泄露问题，而是通过让系统Message持有一个弱引用（&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/j-jtp11225/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;）来解决这个问题。&lt;/li&gt;
&lt;li&gt;在逻辑上控制，这个受限于业务的限制，不过如果逻辑允许的话，可以在页面关闭时将对应的线程结束，或者将Runnable对象从队列中移除&lt;code&gt;mHandler.removeCallback()&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;WeakHandler&quot;&gt;&lt;a href=&quot;#WeakHandler&quot; class=&quot;headerlink&quot; title=&quot;WeakHandler&quot;&gt;&lt;/a&gt;WeakHandler&lt;/h2&gt;&lt;p&gt;下面图片显示WeakHandler的实现逻辑&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/badoo/android-weak-handler/master/WeakHandler.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;解决Handler内存泄露&quot;&gt;&lt;a href=&quot;#解决Handler内存泄露&quot; class=&quot;headerlink&quot; title=&quot;解决Handler内存泄露&quot;&gt;&lt;/a&gt;解决Handler内存泄露&lt;/h3&gt;&lt;p&gt;WeakHandler强引用一个Handler子类(ExecHandler)的对象，然后通过自定义的一个Callback将Handler的消息处理转发到这个callback中，这样就不必为了处理消息而构建一个匿名内部handler类对象。WeakHandler对象（通过ExecHandler对象）仅仅维持对callback对象的弱引用。这样即使callback对象持有对Activity对象的引用，由于其本身不会产生泄露，因此&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ExecHandler&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Handler&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; WeakReference&amp;lt;Callback&amp;gt; mCallback;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ExecHandler() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mCallback = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ExecHandler(WeakReference&amp;lt;Callback&amp;gt; callback) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mCallback = callback;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ExecHandler(Looper looper) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(looper);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mCallback = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ExecHandler(Looper looper, WeakReference&amp;lt;Callback&amp;gt; callback) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(looper);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mCallback = callback;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@NonNull Message msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mCallback != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Callback callback = (Callback)&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mCallback.get();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(callback != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                callback.handleMessage(msg);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，WeakHandler的对象会维持对callback对象的强引用。&lt;/p&gt;
&lt;h3 id=&quot;解决Runnable泄露问题&quot;&gt;&lt;a href=&quot;#解决Runnable泄露问题&quot; class=&quot;headerlink&quot; title=&quot;解决Runnable泄露问题&quot;&gt;&lt;/a&gt;解决Runnable泄露问题&lt;/h3&gt;&lt;p&gt;WeakHandler内部定义一个WeakRunnable用来包装我们传递进去的Runnable对象，在WeakRunnable中维持对Runnable对象的弱引用，从而解决了Runnable对象不释放而造成的内存泄露问题。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WeakRunnable&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; WeakReference&amp;lt;Runnable&amp;gt; mDelegate;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; WeakReference&amp;lt;WeakHandler.ChainedRef&amp;gt; mReference;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    WeakRunnable(WeakReference&amp;lt;Runnable&amp;gt; delegate, WeakReference&amp;lt;WeakHandler.ChainedRef&amp;gt; reference) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mDelegate = delegate;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mReference = reference;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Runnable delegate = (Runnable)&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mDelegate.get();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        WeakHandler.ChainedRef reference = (WeakHandler.ChainedRef)&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mReference.get();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(reference != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            reference.remove();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(delegate != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            delegate.run();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;记住，WeakHandler的对象会维持对runnable对象的强引用。&lt;/p&gt;
&lt;h3 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h3&gt;&lt;p&gt;在使用WeakHandler时，应该在activity（或者fragment）中声明一个全局变量，以保证WeakHandler的生命周期和activity保持一致。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Activity&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; WeakHandler mHandler = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WeakHandler();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果只是定义一个临时变量，在内存不足时handler会被回收，导致callback和runnable对象也会被回收，从而不能拿到回调。&lt;/p&gt;
&lt;p&gt;或者如果定义一个静态变量的话，会导致callback和runnable不能被释放，从而导致内存泄露。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/badoo/android-weak-handler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-weak-handler&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考内容&quot;&gt;&lt;a href=&quot;#参考内容&quot; class=&quot;headerlink&quot; title=&quot;参考内容&quot;&gt;&lt;/a&gt;参考内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/l-JavaMemoryLeak/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java的内存泄漏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://my.oschina.net/rengwuxian/blog/181449&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android中使用Handler造成内存泄露的分析和解决&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/j-jtp11225/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java 理论与实践: 用弱引用堵住内存泄漏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://techblog.badoo.com/blog/2014/08/28/android-handler-memory-leaks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Handler Memory Leaks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题回顾&quot;&gt;&lt;a href=&quot;#问题回顾&quot; class=&quot;headerlink&quot; title=&quot;问题回顾&quot;&gt;&lt;/a&gt;问题回顾&lt;/h2&gt;&lt;h3 id=&quot;内存泄露&quot;&gt;&lt;a href=&quot;#内存泄露&quot; class=&quot;headerlink&quot; title=&quot;内存泄露&quot;&gt;&lt;/a&gt;内存泄露&lt;/h3&gt;&lt;p&gt;什么是内存泄露，请参考&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/l-JavaMemoryLeak/&quot;&gt;Java的内存泄漏&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Handler内存泄露&quot;&gt;&lt;a href=&quot;#Handler内存泄露&quot; class=&quot;headerlink&quot; title=&quot;Handler内存泄露&quot;&gt;&lt;/a&gt;Handler内存泄露&lt;/h3&gt;&lt;p&gt;对于安卓的初学者，常见的handler的写法如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://ohmerhe.com/tags/Android/"/>
    
      <category term="内存泄露" scheme="http://ohmerhe.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 类与对象 —— 类（一）</title>
    <link href="http://ohmerhe.com/2016/01/02/object-class-class/"/>
    <id>http://ohmerhe.com/2016/01/02/object-class-class/</id>
    <published>2016-01-02T08:01:28.000Z</published>
    <updated>2016-07-09T14:25:31.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;类的声明&quot;&gt;&lt;a href=&quot;#类的声明&quot; class=&quot;headerlink&quot; title=&quot;类的声明&quot;&gt;&lt;/a&gt;类的声明&lt;/h2&gt;&lt;p&gt;kotlin用关键字&lt;code&gt;class&lt;/code&gt;声明，声明一个类可以只声明头的部分，类的声明默认是&lt;code&gt;final&lt;/code&gt;的。就像：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Persion&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//或者&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;(name: String)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;类的构造函数可以有很多，但是只有一个可以声明在类的头部，这个构造函数被称做“主构造函数”，其他的被称做“次构造函数”。构造函数使用&lt;code&gt;constructor&lt;/code&gt;关键字，主构造函数在没有可见性修饰符和注解的情况下，&lt;code&gt;constructor&lt;/code&gt;可以被省略。默认的情况下，所有的构造函数的可见性都是&lt;code&gt;public&lt;/code&gt;，对于使用方来说是与类的可见性保持一致。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@Inject&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;&lt;/span&gt;(name: String) &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主构造函数没有自己的函数体，它的参数可以在类的初始化块（&lt;code&gt;init&lt;/code&gt;修饰）访问，在类的属性初始化时也可以访问。所以，在主构造函数里面想要做的事情，可以放在类的初始化块中实现。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;class Customer(name: String) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	val customerKey = name.toUpperCase()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    init &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(&quot;Customer initialized with value $&amp;#123;name&amp;#125;&quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们想要在类的全局都可以访问主构造函数的参数，可以在参数前面加上&lt;code&gt;val&lt;/code&gt;或者&lt;code&gt;var&lt;/code&gt;，这样主构造函数的参数就和类的属性一样了。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; name: String,&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; age: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;my name is &lt;span class=&quot;subst&quot;&gt;$name&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;my age is &lt;span class=&quot;subst&quot;&gt;$age&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;次构造函数必须要使用&lt;code&gt;constructor&lt;/code&gt;修饰，并且必须直接或者间接的委托给主构造函数。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; name: String) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(name: String, parent: Person) : &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;(name) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        parent.children.add(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;h3 id=&quot;类的继承&quot;&gt;&lt;a href=&quot;#类的继承&quot; class=&quot;headerlink&quot; title=&quot;类的继承&quot;&gt;&lt;/a&gt;类的继承&lt;/h3&gt;&lt;p&gt;kotlin中所有的类都有一个父类&lt;code&gt;Any&lt;/code&gt;，类似于java中的Object，但不存在对等关系。Any中只有&lt;code&gt;equals()&lt;/code&gt;、&lt;code&gt;hashCode()&lt;/code&gt;和&lt;code&gt;toString()&lt;/code&gt;三个方法，所以其他的Object的方法都不能直接调用。详情请参见&lt;a href=&quot;https://kotlinlang.org/docs/reference/java-interop.html#object-methods&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java interoperability&lt;/a&gt;。后面有机会我们会再讲到。&lt;/p&gt;
&lt;p&gt;kotlin默认类都是&lt;code&gt;final&lt;/code&gt;的，为了可以被继承，我们需要在类的声明前面加上&lt;code&gt;open&lt;/code&gt;，让该类可以被其他类继承。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Base&lt;/span&gt;&lt;/span&gt;(p: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果父类有主构造函数的话，则必须在子类声明的头部被初始化。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Derived&lt;/span&gt;&lt;/span&gt;(p: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;) : Base(p)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;次构造函数也必须直接或间接的初始化父类的构造函数：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyView&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;View &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(ctx: Context) : &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(ctx) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(ctx: Context, attrs: AttributeSet) : &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(ctx, attrs) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;复写方法&quot;&gt;&lt;a href=&quot;#复写方法&quot; class=&quot;headerlink&quot; title=&quot;复写方法&quot;&gt;&lt;/a&gt;复写方法&lt;/h3&gt;&lt;p&gt;同类一样，子类只能复写父类中被&lt;code&gt;open&lt;/code&gt;修饰的函数，复写方法必须使用&lt;code&gt;override&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;(name: String, age: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;my name is &lt;span class=&quot;subst&quot;&gt;$name&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;my age is &lt;span class=&quot;subst&quot;&gt;$age&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Women&lt;/span&gt;&lt;/span&gt;(name: String, age: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;) : Person(name, age)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;my age is 18&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// error, compiler complain&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;子类中复写的方法，默认也是&lt;code&gt;open&lt;/code&gt;的，如果需要，可以在方法&lt;code&gt;override&lt;/code&gt;之前添加&lt;code&gt;final&lt;/code&gt;注解，让该子类的子类不能再复写该方法。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;多继承&quot;&gt;&lt;a href=&quot;#多继承&quot; class=&quot;headerlink&quot; title=&quot;多继承&quot;&gt;&lt;/a&gt;多继承&lt;/h3&gt;&lt;p&gt;kotlin和java8一样，本身并不能同时继承于多个类，但是可以实现多个接口，而且接口可以有自己的实现，所以当父类和接口或者接口和接口中的方法一样时，会发生冲突，我们需要明确这个时候的解决方案，不然就会&lt;code&gt;compiler complain&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Young&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;my age is between 13 and 25&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt;&lt;/span&gt;(name: String, age: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;) : Person(name, age), Young&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;&amp;lt;Person&amp;gt;.showAge()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;&amp;lt;Young&amp;gt;.showAge()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;委托&quot;&gt;&lt;a href=&quot;#委托&quot; class=&quot;headerlink&quot; title=&quot;委托&quot;&gt;&lt;/a&gt;委托&lt;/h2&gt;&lt;p&gt;委托被认为是一个非常好的替代继承和实现的设计模式，kotlin也支持这种模式。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Base&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseImpl&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; x: &lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;) : Base &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; print(x) &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Derived&lt;/span&gt;&lt;/span&gt;(b: Base) : Base &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; b = BaseImpl(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Derived(b).print() &lt;span class=&quot;comment&quot;&gt;// prints 10&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在类的声明过程中，在父类类型后面使用&lt;code&gt;by&lt;/code&gt;关键字指明在Derived的对象中将会内部存储&lt;code&gt;b&lt;/code&gt;对象，并且编译器会将&lt;code&gt;Base&lt;/code&gt;的所有方法指向&lt;code&gt;b&lt;/code&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类的声明&quot;&gt;&lt;a href=&quot;#类的声明&quot; class=&quot;headerlink&quot; title=&quot;类的声明&quot;&gt;&lt;/a&gt;类的声明&lt;/h2&gt;&lt;p&gt;kotlin用关键字&lt;code&gt;class&lt;/code&gt;声明，声明一个类可以只声明头的部分，类的声明默认是&lt;code&gt;final&lt;/code&gt;的。就像：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Persion&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//或者&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;(name: String)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Kotlin" scheme="http://ohmerhe.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 类与对象 —— 泛型</title>
    <link href="http://ohmerhe.com/2015/12/22/class-object-generic/"/>
    <id>http://ohmerhe.com/2015/12/22/class-object-generic/</id>
    <published>2015-12-22T15:08:50.000Z</published>
    <updated>2016-07-09T09:53:04.000Z</updated>
    
    <content type="html">&lt;p&gt;与java一样，Kotlin也提供泛型，为类型安全提供保证，消除类型强转的烦恼。&lt;/p&gt;
&lt;h3 id=&quot;泛型定义&quot;&gt;&lt;a href=&quot;#泛型定义&quot; class=&quot;headerlink&quot; title=&quot;泛型定义&quot;&gt;&lt;/a&gt;泛型定义&lt;/h3&gt;&lt;p&gt;好吧，如果只是简单声明一个泛型，和&lt;code&gt;Java&lt;/code&gt;没有什么大的区别，你可以这样声明：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Box&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt;(t: T) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后可以这样使用&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; box: Box&amp;lt;&lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;&amp;gt; = Box&amp;lt;&lt;span class=&quot;built_in&quot;&gt;Int&lt;/span&gt;&amp;gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 或者&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; box = Box(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 编译器会进行类型推断&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;泛型约束&quot;&gt;&lt;a href=&quot;#泛型约束&quot; class=&quot;headerlink&quot; title=&quot;泛型约束&quot;&gt;&lt;/a&gt;泛型约束&lt;/h3&gt;&lt;p&gt;和类的继承一样，&lt;code&gt;Kotlin&lt;/code&gt;中使用&lt;code&gt;:&lt;/code&gt;代替&lt;code&gt;extends&lt;/code&gt;对泛型的的类型上限进行约束。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SwipeRefreshableView&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;T : View&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过这里你可以进行多个类型的上限约束：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SwipeRefreshableView&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    where T : View,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          T : Refreshable &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 或者&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;&amp;lt;T&amp;gt;&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cloneWhenGreater&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(list: &lt;span class=&quot;type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;&amp;gt;, threshold: &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;: List&amp;lt;T&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    where T : Comparable,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          T : Cloneable &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; list.filter &amp;#123; it &amp;gt; threshold &amp;#125;.map &amp;#123; it.clone() &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到这里，对于之前用过泛型的同学来说都没有什么难度。so，kotlin还有什么java里没有的东西吗？&lt;/p&gt;
&lt;h3 id=&quot;in和out&quot;&gt;&lt;a href=&quot;#in和out&quot; class=&quot;headerlink&quot; title=&quot;in和out&quot;&gt;&lt;/a&gt;&lt;code&gt;in&lt;/code&gt;和&lt;code&gt;out&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Kotlin&lt;/code&gt;中引入两个新的泛型修饰符&lt;code&gt;in&lt;/code&gt;和&lt;code&gt;out&lt;/code&gt;，要解释这两个关键字的用法，我们先从另外两个概念说起‘covariant（协变性）’和‘contravariance（逆变性）’（不知道的可以&lt;a href=&quot;http://www.cnblogs.com/Figgy/p/4575719.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;）。我们都知道在java中List不是协变的，而Array是协变的：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Integer[] intArray = new Integer[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Number[] numberArray = intArray;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;numberArray[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;f;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的代码中，&lt;code&gt;Integer[]&lt;/code&gt;被认为是&lt;code&gt;Number[]&lt;/code&gt;的子类型，所以可以将&lt;code&gt;intArray&lt;/code&gt;赋值给&lt;code&gt;numberArray&lt;/code&gt;，但是在随后的代码，我们将&lt;code&gt;1.0f&lt;/code&gt;赋给&lt;code&gt;numberArray[0]&lt;/code&gt;，因为在这里看来，将一个浮点型赋给一个Number对象不会有什么问题。最后悲剧发生了，当执行时，程序crash了。&lt;/p&gt;
&lt;p&gt;但是当你使用泛型的的时候：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; strs = new ArrayList&amp;lt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;Object&amp;gt; objs = strs; &lt;span class=&quot;comment&quot;&gt;// error, compiler complain&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;并不是&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;的子类型，于是编译器告诉你，不能直接赋值。或许你会说我们可以使用通配符&lt;code&gt;? extends T&lt;/code&gt;让它变得协变。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; strs = new ArrayList&amp;lt;String&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;strs.add(&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;strs.add(&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;? extends Object&amp;gt; objs = strs;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//编译通过&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;是&lt;code&gt;List&amp;lt;? extends Object&amp;gt;&lt;/code&gt;的子类，所以上面的代码的确能够编译运行，但是当你尝试为&lt;code&gt;objs&lt;/code&gt;添加内容时：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//然后添加一个int型试试&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;objs.add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// error, compiler complain&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 编译器编译出错&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 现在再添加一个String&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;objs.add(&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// error, compiler complain&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 编译出错&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于objs并不会因为&lt;code&gt;objs = strs;&lt;/code&gt;的赋值，而将&lt;code&gt;objs&lt;/code&gt;的泛型类型转化为&lt;code&gt;String&lt;/code&gt;类型，所以在不能判断objs的泛型类型的情况下，往objs添加任何类型的对象都是不被允许的。但是我们明确知道objs的所有类型上限（upper bound），于是我们可以通过&lt;code&gt;objs.get(0)&lt;/code&gt;获取Object的对象。&lt;/p&gt;
&lt;p&gt; 小结一下，我们可以用通配符&lt;code&gt;? extends T&lt;/code&gt;让泛型类变得协变，但是对于具体泛型类型的对象我们不能赋值，只能获取。于是在下面的假设中java就可以这么写：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Source&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; T getT();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; void setT(T t);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; void copy(Source&amp;lt;String&amp;gt; strs)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Source&amp;lt;? extends Object&amp;gt; objs = strs;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    objs.setT(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// error, compiler complain&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	String str = (String) objs.getT();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;Kotlin&lt;/code&gt;中就可以这么写：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Source&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getT&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;: T&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setT&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t: &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;copyT&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(strs: &lt;span class=&quot;type&quot;&gt;Source&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; objs: Source&amp;lt;&lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; Any?&amp;gt; = strs;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    objs.setT(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// error, compiler complain&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    objs.getT()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的&lt;code&gt;out Any?&lt;/code&gt;可以用&lt;code&gt;*&lt;/code&gt;代替。&lt;/p&gt;
&lt;p&gt;如果我们可以确定&lt;code&gt;Source&lt;/code&gt;这个类不会有&lt;code&gt;abstract fun setT(t: T)&lt;/code&gt;类似的操作，我们可以这样写：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Source&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;out T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getT&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;: T&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果下面出现会编译不过&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// abstract fun setT(t: T) // error, compiler complain&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;copyT&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(strs: &lt;span class=&quot;type&quot;&gt;Source&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; objs: Source&amp;lt;Any&amp;gt; = strs;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    objs.setT(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// error, compiler complain&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    objs.getT()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;小结一下，在定义泛型类&lt;code&gt;C&amp;lt;T&amp;gt;&lt;/code&gt;时，当我们在泛型类型&lt;code&gt;T&lt;/code&gt;前面添加&lt;code&gt;out&lt;/code&gt;，&lt;code&gt;C&lt;/code&gt;为&lt;code&gt;T&lt;/code&gt;的协变类。在该类的作用域内，类型&lt;code&gt;T&lt;/code&gt;只能作为该类中函数的返回类型，不能作为参数传递进来，这时也称做&lt;code&gt;C&lt;/code&gt;为&lt;code&gt;T&lt;/code&gt;的生产者（Producer）。&lt;/p&gt;
&lt;p&gt;以此类推，在定义泛型类&lt;code&gt;C&amp;lt;T&amp;gt;&lt;/code&gt;时，当我们在泛型类型&lt;code&gt;T&lt;/code&gt;前面添加&lt;code&gt;in&lt;/code&gt;，&lt;code&gt;C&lt;/code&gt;为&lt;code&gt;T&lt;/code&gt;的逆变类。在该类的作用域内，类型&lt;code&gt;T&lt;/code&gt;只能作为该类中函数的参数传递进来，不能作为返回类型，这时也称做&lt;code&gt;C&lt;/code&gt;为&lt;code&gt;T&lt;/code&gt;的消费者（Consumer）。&lt;/p&gt;
&lt;p&gt;类似于&lt;code&gt;java&lt;/code&gt;中的&lt;a href=&quot;http://www.importnew.com/8966.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PECS&lt;/a&gt;（Producer Extends，Consumer Super），我们可以总结出：‘Consumer in, Producer out’。&lt;/p&gt;
&lt;p&gt;如果在泛型类型使用测，在对应泛型的具体类型前面使用&lt;code&gt;out&lt;/code&gt;，则等同于使用&lt;code&gt;java&lt;/code&gt;中的&lt;code&gt;extends&lt;/code&gt;字段，&lt;code&gt;in&lt;/code&gt;则等同于&lt;code&gt;super&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(from: &lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;, to: &lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert(from.size == to.size)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; from.indices)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        to[i] = from[i]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等同于&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; void copy(List&amp;lt;? extends String&amp;gt; from, List&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; String&amp;gt; to) &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS： 这里Array 与 List 不是对等关系。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/panjun-Donet/archive/2008/09/27/1300609.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java泛型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/Figgy/p/4575719.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;不变性、协变性和逆变性（Invariance, Covariance &amp;amp; Contravariance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.importnew.com/8966.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java 泛型: 什么是PECS（Producer Extends, Consumer Super）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/generics.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kotlin-Generics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;与java一样，Kotlin也提供泛型，为类型安全提供保证，消除类型强转的烦恼。&lt;/p&gt;
&lt;h3 id=&quot;泛型定义&quot;&gt;&lt;a href=&quot;#泛型定义&quot; class=&quot;headerlink&quot; title=&quot;泛型定义&quot;&gt;&lt;/a&gt;泛型定义&lt;/h3&gt;&lt;p&gt;好吧，如果只是简单声明一个泛型，和&lt;code&gt;Java&lt;/code&gt;没有什么大的区别，你可以这样声明：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kotlin" scheme="http://ohmerhe.com/tags/Kotlin/"/>
    
      <category term="泛型" scheme="http://ohmerhe.com/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
</feed>
